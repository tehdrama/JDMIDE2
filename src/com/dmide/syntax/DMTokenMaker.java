/* The following code was generated by JFlex 1.4.1 on 9/28/12 4:26 PM */

/*
 * Generated on 9/28/12 4:26 PM
 */
package com.dmide.syntax;

import java.io.IOException;
import java.io.Reader;

import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.AbstractJFlexCTokenMaker;
import org.fife.ui.rsyntaxtextarea.DefaultToken;
import org.fife.ui.rsyntaxtextarea.Token;


/**
 * Token maker for DMIDE.
 */

public class DMTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 3;
  public static final int DOCCOMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\21\1\10\1\0\1\21\1\17\22\0\1\73\1\27\1\15"+
    "\1\20\1\1\1\33\1\75\1\7\2\30\1\23\1\31\1\32\1\76"+
    "\1\26\1\22\1\4\1\16\1\67\1\16\1\6\1\71\2\6\2\3"+
    "\1\44\1\32\1\77\1\74\1\100\1\27\1\20\1\60\1\5\1\65"+
    "\1\5\1\62\1\5\1\1\1\66\11\1\1\63\1\61\1\64\6\1"+
    "\1\30\1\11\1\30\1\101\1\2\1\0\1\46\1\14\1\52\1\54"+
    "\1\43\1\40\1\50\1\34\1\41\1\57\1\51\1\42\1\55\1\13"+
    "\1\53\1\36\1\72\1\47\1\37\1\35\1\12\1\56\1\45\1\24"+
    "\1\70\1\1\1\25\1\102\1\25\1\27\uff81\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\2\2\1\3\1\4\3\1\1\5\1\6"+
    "\2\7\1\10\2\7\23\1\5\7\1\11\1\12\4\11"+
    "\1\13\5\11\1\14\3\11\1\0\2\15\1\3\1\16"+
    "\1\0\1\3\7\1\2\5\1\17\1\20\1\21\6\1"+
    "\1\22\25\1\1\22\14\1\1\22\35\1\1\23\4\0"+
    "\1\24\11\0\1\25\1\3\1\26\2\3\1\16\1\3"+
    "\3\1\1\22\3\1\1\5\1\27\1\5\1\30\15\1"+
    "\1\31\61\1\1\32\7\1\15\0\1\3\6\1\1\5"+
    "\2\1\1\31\3\1\1\22\1\31\3\1\1\31\16\1"+
    "\1\32\1\1\1\32\5\1\1\31\4\1\1\31\3\1"+
    "\1\31\3\1\1\31\2\1\2\0\1\33\2\0\1\34"+
    "\2\0\1\35\1\0\1\3\5\1\1\5\13\1\1\31"+
    "\21\1\7\0\1\3\1\1\1\31\1\5\26\1\1\31"+
    "\14\1\1\31\4\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[422];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u010c\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa"+
    "\0\u03ed\0\u010c\0\u010c\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c"+
    "\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754"+
    "\0\u0797\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c"+
    "\0\u09af\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u010c\0\u0afe\0\u0b41"+
    "\0\u0b84\0\u0bc7\0\u010c\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16"+
    "\0\u010c\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb"+
    "\0\u010c\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0"+
    "\0\u1103\0\u1146\0\u1189\0\u11cc\0\u010c\0\u010c\0\u120f\0\u1252"+
    "\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u014f\0\u13e4\0\u1427"+
    "\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f"+
    "\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857"+
    "\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f"+
    "\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87"+
    "\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f"+
    "\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7"+
    "\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf"+
    "\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u010c\0\u24a4"+
    "\0\u24e7\0\u252a\0\u256d\0\u010c\0\u25b0\0\u25f3\0\u2636\0\u2679"+
    "\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u0ea8\0\u280b\0\u010c"+
    "\0\u284e\0\u2891\0\u0f2e\0\u28d4\0\u2917\0\u295a\0\u299d\0\u29e0"+
    "\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u010c\0\u2b2f\0\u010c\0\u2b72"+
    "\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a"+
    "\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u014f\0\u2ed9\0\u2f1c\0\u2f5f"+
    "\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u3134\0\u3177"+
    "\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f"+
    "\0\u33d2\0\u3415\0\u3458\0\u349b\0\u34de\0\u3521\0\u3564\0\u35a7"+
    "\0\u35ea\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf"+
    "\0\u3802\0\u3845\0\u3888\0\u38cb\0\u390e\0\u3951\0\u3994\0\u39d7"+
    "\0\u3a1a\0\u3a5d\0\u3aa0\0\u3ae3\0\u3b26\0\u3b69\0\u014f\0\u3bac"+
    "\0\u3bef\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4"+
    "\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13\0\u3f56\0\u3f99\0\u3fdc"+
    "\0\u401f\0\u4062\0\u40a5\0\u40e8\0\u412b\0\u416e\0\u41b1\0\u41f4"+
    "\0\u4237\0\u427a\0\u42bd\0\u4300\0\u4343\0\u4386\0\u43c9\0\u440c"+
    "\0\u444f\0\u4492\0\u44d5\0\u4518\0\u455b\0\u459e\0\u299d\0\u45e1"+
    "\0\u4624\0\u4667\0\u46aa\0\u46ed\0\u4730\0\u4773\0\u47b6\0\u47f9"+
    "\0\u483c\0\u487f\0\u48c2\0\u4905\0\u4948\0\u498b\0\u49ce\0\u4a11"+
    "\0\u4a54\0\u4a97\0\u4ada\0\u4b1d\0\u4b60\0\u4492\0\u4ba3\0\u4be6"+
    "\0\u4c29\0\u4c6c\0\u4caf\0\u4cf2\0\u4d35\0\u4d78\0\u4dbb\0\u4dfe"+
    "\0\u4e41\0\u4e84\0\u4300\0\u4ec7\0\u4f0a\0\u4f4d\0\u4f90\0\u4fd3"+
    "\0\u5016\0\u5059\0\u509c\0\u50df\0\u5122\0\u5165\0\u51a8\0\u51eb"+
    "\0\u522e\0\u5271\0\u52b4\0\u52f7\0\u533a\0\u537d\0\u53c0\0\u5403"+
    "\0\u5446\0\u5489\0\u54cc\0\u550f\0\u5552\0\u5595\0\u55d8\0\u561b"+
    "\0\u565e\0\u56a1\0\u56e4\0\u5727\0\u576a\0\u57ad\0\u57f0\0\u5833"+
    "\0\u5876\0\u58b9\0\u58fc\0\u593f\0\u5982\0\u59c5\0\u5a08\0\u5a4b"+
    "\0\u5a8e\0\u5ad1\0\u5b14\0\u5b57\0\u4fd3\0\u5b9a\0\u509c\0\u5bdd"+
    "\0\u5165\0\u5c20\0\u5c63\0\u5ca6\0\u5ce9\0\u5d2c\0\u5d6f\0\u5db2"+
    "\0\u5df5\0\u5e38\0\u5e7b\0\u5ebe\0\u5f01\0\u5f44\0\u5f87\0\u5fca"+
    "\0\u600d\0\u6050\0\u6093\0\u60d6\0\u6119\0\u615c\0\u619f\0\u61e2"+
    "\0\u6225\0\u6268\0\u62ab\0\u29e0\0\u62ee\0\u6331\0\u6374\0\u63b7"+
    "\0\u63fa\0\u643d\0\u6480\0\u64c3\0\u6506\0\u6549\0\u658c\0\u65cf"+
    "\0\u6612\0\u010c\0\u6655\0\u6698\0\u66db\0\u671e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[422];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\6\1\7\1\11\1\12"+
    "\1\5\1\13\1\14\1\15\1\16\1\7\2\5\1\17"+
    "\1\20\1\21\1\6\1\22\1\5\1\23\1\22\1\24"+
    "\1\5\1\21\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\23\1\35\1\36\1\37\1\40\1\6"+
    "\1\41\1\42\1\43\1\44\1\45\1\6\1\46\4\6"+
    "\1\47\1\6\1\7\1\6\1\7\1\6\1\17\1\21"+
    "\1\50\1\51\1\52\1\53\1\23\1\54\10\55\1\56"+
    "\12\55\1\57\10\55\1\60\3\55\1\61\4\55\1\62"+
    "\45\55\1\63\12\55\1\64\10\55\1\65\3\55\1\66"+
    "\4\55\1\67\35\55\10\70\1\71\23\70\1\72\3\70"+
    "\1\73\4\70\1\74\35\70\104\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\10\6\1\0"+
    "\26\6\10\0\3\76\2\7\1\76\1\7\2\0\4\76"+
    "\1\0\1\7\1\0\1\76\3\0\1\76\7\0\10\76"+
    "\1\0\22\76\1\7\1\76\1\7\1\76\10\0\3\76"+
    "\2\7\1\76\1\7\2\0\4\76\1\0\1\7\1\0"+
    "\1\76\3\0\1\77\7\0\10\76\1\0\22\76\1\7"+
    "\1\76\1\7\1\76\10\0\7\100\1\101\1\102\1\103"+
    "\71\100\1\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\2\6\1\104\5\6\1\0\2\6"+
    "\1\105\23\6\11\0\6\6\2\0\1\75\1\106\2\6"+
    "\1\0\1\6\5\0\1\6\7\0\7\6\1\107\1\0"+
    "\26\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\6\6\1\110\1\6\1\0\2\6"+
    "\1\111\3\6\1\112\17\6\10\0\10\16\1\113\1\114"+
    "\3\16\1\115\65\16\21\0\1\17\51\0\1\17\31\0"+
    "\1\116\1\117\50\0\1\23\102\0\1\23\37\0\1\23"+
    "\42\0\1\23\7\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\1\6\1\120\5\6\1\121"+
    "\1\0\1\6\1\122\24\6\11\0\6\6\2\0\1\75"+
    "\1\123\2\6\1\0\1\6\5\0\1\6\7\0\5\6"+
    "\1\124\1\6\1\125\1\0\6\6\1\126\1\6\1\127"+
    "\12\6\1\130\2\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\5\6\1\131\2\6"+
    "\1\0\1\6\1\132\1\133\23\6\11\0\6\6\2\0"+
    "\1\75\3\6\1\0\1\6\5\0\1\6\7\0\1\134"+
    "\1\135\1\136\2\6\1\137\1\140\1\141\1\0\1\142"+
    "\5\6\1\143\16\6\1\144\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\1\6\1\145"+
    "\3\6\1\146\1\147\1\150\1\0\5\6\1\151\1\152"+
    "\1\153\16\6\11\0\6\6\2\0\1\75\1\6\1\154"+
    "\1\6\1\0\1\6\5\0\1\6\7\0\3\6\1\155"+
    "\1\126\3\6\1\0\5\6\1\156\2\6\1\157\15\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\5\6\1\160\1\6\1\161\1\0\6\6"+
    "\1\162\17\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\6\6\1\163\1\6\1\0"+
    "\26\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\1\164\4\6\1\165\2\6\1\0"+
    "\1\6\1\166\24\6\11\0\6\6\2\0\1\75\2\6"+
    "\1\167\1\0\1\6\5\0\1\6\7\0\1\6\1\170"+
    "\1\6\1\171\2\6\1\172\1\6\1\0\2\6\1\173"+
    "\4\6\1\174\16\6\11\0\6\6\2\0\1\75\1\137"+
    "\2\6\1\0\1\6\5\0\1\6\7\0\7\6\1\175"+
    "\1\0\1\6\1\176\1\6\1\177\2\6\1\200\17\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\6\6\1\201\1\202\1\0\6\6\1\203"+
    "\17\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\10\6\1\0\1\6\1\204\2\6"+
    "\1\205\1\6\1\206\1\6\1\207\15\6\11\0\6\6"+
    "\2\0\1\75\1\210\1\6\1\211\1\0\1\6\5\0"+
    "\1\6\7\0\1\212\7\6\1\0\2\6\1\213\6\6"+
    "\1\214\14\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\7\6\1\215\1\0\1\6"+
    "\1\216\4\6\1\126\17\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\5\6\1\217"+
    "\2\6\1\0\1\6\1\220\4\6\1\221\1\222\16\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\5\6\1\223\1\6\1\224\1\0\1\6"+
    "\1\152\24\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\10\6\1\0\14\6\1\225"+
    "\11\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\10\6\1\0\16\6\1\226\7\6"+
    "\105\0\1\23\101\0\1\23\1\0\1\23\103\0\1\21"+
    "\103\0\1\21\104\0\1\23\10\55\1\0\12\55\1\0"+
    "\10\55\1\0\3\55\1\0\4\55\1\0\35\55\22\0"+
    "\1\227\115\0\1\230\102\0\1\231\3\0\1\232\106\0"+
    "\1\233\57\0\1\234\115\0\1\235\102\0\1\236\3\0"+
    "\1\237\106\0\1\240\35\0\10\70\1\0\23\70\1\0"+
    "\3\70\1\0\4\70\1\0\35\70\35\0\1\241\102\0"+
    "\1\242\3\0\1\243\106\0\1\244\47\0\1\245\70\0"+
    "\7\76\2\0\4\76\1\0\1\76\1\0\1\76\3\0"+
    "\1\76\7\0\10\76\1\0\26\76\10\0\3\76\4\246"+
    "\2\0\3\76\1\246\1\0\1\246\1\0\1\76\3\0"+
    "\1\76\7\0\4\76\1\246\2\76\1\246\1\0\1\76"+
    "\1\246\3\76\1\246\1\76\1\246\3\76\1\246\1\76"+
    "\1\246\2\76\1\246\1\76\1\246\1\76\1\246\1\76"+
    "\10\0\7\247\1\250\1\0\72\247\7\0\1\250\73\0"+
    "\4\247\1\251\1\247\1\252\1\253\1\0\1\100\1\254"+
    "\3\100\1\251\16\247\1\100\2\247\1\100\6\247\1\100"+
    "\17\247\1\251\1\247\1\252\11\247\1\0\6\6\2\0"+
    "\1\75\3\6\1\0\1\6\5\0\1\6\7\0\2\6"+
    "\1\255\5\6\1\0\26\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\6\6\1\256"+
    "\1\6\1\0\26\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\10\6\1\0\10\6"+
    "\1\257\15\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\10\6\1\0\1\260\25\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\10\6\1\0\6\6\1\131\17\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\7\6\1\261\1\0\6\6\1\262\17\6\11\0"+
    "\6\6\2\0\1\75\1\263\2\6\1\0\1\6\5\0"+
    "\1\6\7\0\10\6\1\0\26\6\10\0\11\113\1\264"+
    "\3\113\1\265\71\113\1\16\1\113\2\16\1\0\1\16"+
    "\1\266\4\16\16\113\1\16\2\113\1\16\6\113\1\16"+
    "\17\113\1\16\1\113\1\16\11\113\23\0\1\267\60\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\10\6\1\0\10\6\1\105\15\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\10\6\1\0\1\6\1\270\24\6\11\0\6\6\2\0"+
    "\1\75\3\6\1\0\1\6\5\0\1\6\7\0\3\6"+
    "\1\271\4\6\1\0\26\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\10\6\1\0"+
    "\2\6\1\272\23\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\10\6\1\0\10\6"+
    "\1\273\15\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\274\7\0\10\6\1\0\26\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\2\6\1\126\5\6\1\0\26\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\2\6\1\275\5\6\1\0\26\6\11\0\6\6\2\0"+
    "\1\75\3\6\1\0\1\6\5\0\1\6\7\0\10\6"+
    "\1\0\5\6\1\276\20\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\10\6\1\0"+
    "\2\6\1\277\23\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\10\6\1\0\6\6"+
    "\1\300\17\6\11\0\6\6\2\0\1\75\1\301\2\6"+
    "\1\0\1\6\5\0\1\6\7\0\7\6\1\204\1\0"+
    "\26\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\7\6\1\302\1\0\1\6\1\303"+
    "\24\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\10\6\1\0\1\6\1\304\24\6"+
    "\11\0\6\6\2\0\1\75\1\6\1\305\1\6\1\0"+
    "\1\6\5\0\1\6\7\0\10\6\1\0\26\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\7\6\1\306\1\0\26\6\11\0\6\6\2\0"+
    "\1\75\3\6\1\0\1\6\5\0\1\6\7\0\1\6"+
    "\1\126\6\6\1\0\26\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\5\6\1\307"+
    "\2\6\1\0\26\6\11\0\6\6\2\0\1\75\1\310"+
    "\2\6\1\0\1\6\5\0\1\6\7\0\10\6\1\0"+
    "\2\6\1\311\23\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\10\6\1\0\2\6"+
    "\1\312\23\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\2\6\1\305\5\6\1\0"+
    "\26\6\11\0\6\6\2\0\1\75\1\6\1\313\1\6"+
    "\1\0\1\6\5\0\1\6\7\0\6\6\1\314\1\6"+
    "\1\0\26\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\5\6\1\315\2\6\1\0"+
    "\26\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\316\7\0\10\6\1\0\26\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\10\6\1\0\6\6\1\317\17\6\11\0\6\6\2\0"+
    "\1\75\3\6\1\0\1\6\5\0\1\6\7\0\10\6"+
    "\1\0\2\6\1\126\23\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\7\6\1\320"+
    "\1\0\26\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\2\6\1\321\2\6\1\322"+
    "\2\6\1\0\26\6\11\0\6\6\2\0\1\75\1\6"+
    "\1\323\1\6\1\0\1\6\5\0\1\6\7\0\1\6"+
    "\1\324\1\325\1\326\1\327\1\330\1\331\1\6\1\0"+
    "\1\6\1\332\4\6\1\333\1\6\1\334\15\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\10\6\1\0\6\6\1\335\17\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\10\6\1\0\1\6\1\336\24\6\11\0\6\6\2\0"+
    "\1\75\1\6\1\276\1\6\1\0\1\6\5\0\1\6"+
    "\7\0\3\6\1\337\4\6\1\0\26\6\11\0\6\6"+
    "\2\0\1\75\1\6\1\340\1\6\1\0\1\6\5\0"+
    "\1\6\7\0\10\6\1\0\26\6\11\0\6\6\2\0"+
    "\1\75\3\6\1\0\1\6\5\0\1\6\7\0\10\6"+
    "\1\0\1\255\2\6\1\305\1\6\1\341\20\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\3\6\1\342\4\6\1\0\26\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\5\6\1\343\2\6\1\0\26\6\11\0\6\6\2\0"+
    "\1\75\1\6\1\344\1\6\1\0\1\6\5\0\1\6"+
    "\7\0\10\6\1\0\26\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\6\6\1\345"+
    "\1\6\1\0\26\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\3\6\1\305\4\6"+
    "\1\0\26\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\10\6\1\0\6\6\1\346"+
    "\17\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\10\6\1\0\5\6\1\347\20\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\7\6\1\144\1\0\26\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\7\6\1\350\1\0\3\6\1\260\1\6\1\351\20\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\10\6\1\0\7\6\1\352\16\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\1\6\1\353\6\6\1\0\26\6\11\0\6\6"+
    "\2\0\1\75\1\6\1\354\1\6\1\0\1\6\5\0"+
    "\1\6\7\0\10\6\1\0\26\6\11\0\6\6\2\0"+
    "\1\75\2\6\1\305\1\0\1\6\5\0\1\6\7\0"+
    "\10\6\1\0\26\6\11\0\6\6\2\0\1\75\1\355"+
    "\2\6\1\0\1\6\5\0\1\6\7\0\6\6\1\320"+
    "\1\6\1\0\26\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\10\6\1\0\6\6"+
    "\1\356\17\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\1\6\1\357\6\6\1\0"+
    "\26\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\1\6\1\360\6\6\1\0\26\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\6\6\1\320\1\6\1\0\26\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\7\6\1\361\1\0\26\6\11\0\6\6\2\0"+
    "\1\75\1\6\1\362\1\6\1\0\1\6\5\0\1\6"+
    "\7\0\2\6\1\363\1\305\4\6\1\0\26\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\2\6\1\364\5\6\1\0\26\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\1\6\1\365\6\6\1\0\26\6\11\0\6\6\2\0"+
    "\1\75\3\6\1\0\1\6\5\0\1\6\7\0\10\6"+
    "\1\0\6\6\1\366\3\6\1\367\13\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\7\6\1\121\1\0\26\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\10\6\1\0"+
    "\1\6\1\370\24\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\5\6\1\223\2\6"+
    "\1\0\26\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\6\6\1\126\1\6\1\0"+
    "\26\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\1\6\1\371\6\6\1\0\26\6"+
    "\11\0\6\6\2\0\1\75\1\6\1\305\1\6\1\0"+
    "\1\6\5\0\1\6\7\0\3\6\1\372\4\6\1\0"+
    "\26\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\305\7\0\10\6\1\0\26\6\11\0\6\6"+
    "\2\0\1\75\2\6\1\367\1\0\1\6\5\0\1\6"+
    "\7\0\10\6\1\0\26\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\10\6\1\0"+
    "\24\6\1\305\1\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\7\6\1\373\1\0"+
    "\26\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\10\6\1\0\2\6\1\374\23\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\10\6\1\0\14\6\1\375\11\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\10\6\1\0\13\6\1\376\12\6\45\0\1\377"+
    "\103\0\1\u0100\106\0\1\u0101\105\0\1\u0102\72\0\1\u0103"+
    "\103\0\1\u0104\106\0\1\u0105\105\0\1\u0106\72\0\1\u0107"+
    "\103\0\1\u0108\106\0\1\u0109\105\0\1\u010a\40\0\4\u010b"+
    "\5\0\1\u010b\1\0\1\u010b\21\0\1\u010b\2\0\1\u010b"+
    "\2\0\1\u010b\3\0\1\u010b\1\0\1\u010b\3\0\1\u010b"+
    "\1\0\1\u010b\2\0\1\u010b\1\0\1\u010b\1\0\1\u010b"+
    "\11\0\7\247\1\101\1\0\76\247\1\252\1\247\1\252"+
    "\1\250\1\0\5\247\1\252\50\247\1\252\1\247\1\252"+
    "\15\247\1\100\1\247\1\100\1\250\1\0\5\247\1\100"+
    "\50\247\1\100\1\247\1\100\14\247\4\u010c\1\101\1\0"+
    "\3\247\1\u010c\1\247\1\u010c\21\247\1\u010c\2\247\1\u010c"+
    "\2\247\1\u010c\3\247\1\u010c\1\247\1\u010c\3\247\1\u010c"+
    "\1\247\1\u010c\2\247\1\u010c\1\247\1\u010c\1\247\1\u010c"+
    "\11\247\1\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\7\6\1\u010d\1\0\26\6\11\0"+
    "\1\6\1\u010e\4\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\10\6\1\0\26\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\10\6\1\0\22\6\1\352\3\6\11\0\6\6\2\0"+
    "\1\75\3\6\1\0\1\6\5\0\1\6\7\0\6\6"+
    "\1\u010f\1\6\1\0\26\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\10\6\1\0"+
    "\1\6\1\u0110\24\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\10\6\1\0\1\u0111"+
    "\25\6\11\0\6\6\2\0\1\75\1\6\1\u0112\1\6"+
    "\1\0\1\6\5\0\1\6\7\0\10\6\1\0\26\6"+
    "\10\0\10\113\1\0\75\113\4\u0113\2\113\1\264\2\113"+
    "\1\u0113\1\265\1\u0113\21\113\1\u0113\2\113\1\u0113\2\113"+
    "\1\u0113\3\113\1\u0113\1\113\1\u0113\3\113\1\u0113\1\113"+
    "\1\u0113\2\113\1\u0113\1\113\1\u0113\1\113\1\u0113\11\113"+
    "\1\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\10\6\1\0\2\6\1\u0114\23\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\10\6\1\0\5\6\1\u0115\20\6\11\0\6\6"+
    "\2\0\1\75\1\6\1\305\1\6\1\0\1\6\5\0"+
    "\1\6\7\0\4\6\1\367\3\6\1\0\26\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\7\6\1\257\1\0\26\6\11\0\6\6\2\0"+
    "\1\75\3\6\1\0\1\6\5\0\1\6\7\0\1\6"+
    "\1\u0116\6\6\1\0\26\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\7\6\1\u0117"+
    "\1\0\26\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\10\6\1\0\4\6\1\305"+
    "\21\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\10\6\1\0\1\6\1\u0118\24\6"+
    "\11\0\6\6\2\0\1\75\2\6\1\305\1\0\1\6"+
    "\5\0\1\6\7\0\10\6\1\0\5\6\1\126\20\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\1\6\1\u0119\6\6\1\0\26\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\2\6\1\u011a\5\6\1\0\26\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\1\6\1\u011b\6\6\1\0\2\6\1\u011c\23\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\10\6\1\0\1\137\25\6\11\0\6\6\2\0"+
    "\1\75\3\6\1\0\1\6\5\0\1\6\7\0\7\6"+
    "\1\145\1\0\26\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\1\6\1\u011d\6\6"+
    "\1\0\26\6\11\0\6\6\2\0\1\75\1\6\1\u011e"+
    "\1\6\1\0\1\6\5\0\1\6\7\0\10\6\1\0"+
    "\26\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\1\6\1\364\6\6\1\0\26\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\1\6\1\305\6\6\1\0\26\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\10\6\1\0\7\6\1\364\16\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\7\6\1\u011f\1\0\26\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\3\6\1\312"+
    "\4\6\1\0\5\6\1\276\20\6\11\0\6\6\2\0"+
    "\1\75\3\6\1\0\1\6\5\0\1\6\7\0\5\6"+
    "\1\u0120\2\6\1\0\26\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\2\6\1\u0121"+
    "\5\6\1\0\26\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\6\6\1\305\1\6"+
    "\1\0\26\6\11\0\6\6\2\0\1\75\1\312\2\6"+
    "\1\0\1\6\5\0\1\6\7\0\10\6\1\0\26\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\1\6\1\u0122\6\6\1\0\26\6\11\0"+
    "\6\6\2\0\1\75\1\u0123\2\6\1\0\1\6\5\0"+
    "\1\6\7\0\10\6\1\0\26\6\11\0\6\6\2\0"+
    "\1\75\1\u0124\2\6\1\0\1\6\5\0\1\6\7\0"+
    "\7\6\1\u0125\1\0\23\6\1\u0126\2\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\10\6\1\0\1\6\1\u0127\24\6\11\0\6\6\2\0"+
    "\1\75\3\6\1\0\1\6\5\0\1\6\7\0\10\6"+
    "\1\0\1\6\1\u0128\24\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\5\6\1\u0129"+
    "\2\6\1\0\26\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\10\6\1\0\5\6"+
    "\1\u012a\20\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\10\6\1\0\6\6\1\u012b"+
    "\17\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\10\6\1\0\2\6\1\u012c\23\6"+
    "\11\0\6\6\2\0\1\75\2\6\1\u012d\1\0\1\6"+
    "\5\0\1\6\7\0\10\6\1\0\26\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\10\6\1\0\6\6\1\177\17\6\11\0\6\6\2\0"+
    "\1\75\1\6\1\u012e\1\6\1\0\1\6\5\0\1\6"+
    "\7\0\10\6\1\0\26\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\10\6\1\0"+
    "\3\6\1\u012f\22\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\1\6\1\u0130\6\6"+
    "\1\0\26\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\1\6\1\u0131\6\6\1\0"+
    "\3\6\1\u0127\22\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\10\6\1\0\1\6"+
    "\1\u0132\24\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\7\6\1\126\1\0\26\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\6\6\1\342\1\6\1\0\26\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\3\6\1\u0133\3\6\1\150\1\0\3\6\1\u0134"+
    "\1\6\1\u0135\20\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\10\6\1\0\4\6"+
    "\1\u0136\21\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\10\6\1\0\10\6\1\367"+
    "\15\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\5\6\1\u0137\2\6\1\0\26\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\10\6\1\0\1\6\1\367\24\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\3\6\1\u0138\4\6\1\0\5\6\1\u0139\20\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\1\6\1\u0131\6\6\1\0\26\6\11\0"+
    "\6\6\2\0\1\75\1\u013a\2\6\1\0\1\6\5\0"+
    "\1\6\7\0\10\6\1\0\26\6\11\0\6\6\2\0"+
    "\1\75\3\6\1\0\1\6\5\0\1\6\7\0\10\6"+
    "\1\0\3\6\1\u012f\3\6\1\u013b\16\6\11\0\6\6"+
    "\2\0\1\75\1\6\1\u013c\1\6\1\0\1\6\5\0"+
    "\1\6\7\0\10\6\1\0\26\6\11\0\6\6\2\0"+
    "\1\75\2\6\1\u013d\1\0\1\6\5\0\1\6\7\0"+
    "\10\6\1\0\26\6\11\0\1\6\1\u013e\4\6\2\0"+
    "\1\75\3\6\1\0\1\6\5\0\1\6\7\0\10\6"+
    "\1\0\26\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\10\6\1\0\6\6\1\126"+
    "\17\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\10\6\1\0\23\6\1\u013f\2\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\1\6\1\u0140\1\6\1\141\4\6\1\0"+
    "\26\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\10\6\1\0\23\6\1\352\2\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\1\6\1\u0141\6\6\1\0\26\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\2\6\1\321\5\6\1\0\26\6\11\0\6\6"+
    "\2\0\1\75\1\u0142\2\6\1\0\1\6\5\0\1\6"+
    "\7\0\10\6\1\0\26\6\11\0\6\6\2\0\1\75"+
    "\1\6\1\336\1\6\1\0\1\6\5\0\1\6\7\0"+
    "\10\6\1\0\26\6\11\0\6\6\2\0\1\75\1\346"+
    "\2\6\1\0\1\6\5\0\1\6\7\0\10\6\1\0"+
    "\26\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\3\6\1\327\4\6\1\0\26\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\10\6\1\0\1\u0143\25\6\11\0\6\6"+
    "\2\0\1\75\2\6\1\126\1\0\1\6\5\0\1\6"+
    "\7\0\10\6\1\0\26\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\10\6\1\0"+
    "\15\6\1\u0144\10\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\10\6\1\0\14\6"+
    "\1\u0145\11\6\46\0\1\u0146\110\0\1\u0147\101\0\1\u0100"+
    "\65\0\1\u0148\112\0\1\u0149\110\0\1\u014a\101\0\1\u0104"+
    "\65\0\1\u014b\112\0\1\u014c\110\0\1\u014d\101\0\1\u0108"+
    "\65\0\1\u014e\57\0\4\u014f\5\0\1\u014f\1\0\1\u014f"+
    "\21\0\1\u014f\2\0\1\u014f\2\0\1\u014f\3\0\1\u014f"+
    "\1\0\1\u014f\3\0\1\u014f\1\0\1\u014f\2\0\1\u014f"+
    "\1\0\1\u014f\1\0\1\u014f\11\0\3\247\4\u0150\1\101"+
    "\1\0\3\247\1\u0150\1\247\1\u0150\21\247\1\u0150\2\247"+
    "\1\u0150\2\247\1\u0150\3\247\1\u0150\1\247\1\u0150\3\247"+
    "\1\u0150\1\247\1\u0150\2\247\1\u0150\1\247\1\u0150\1\247"+
    "\1\u0150\11\247\1\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\10\6\1\0\2\6\1\352"+
    "\23\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\7\6\1\u0151\1\0\7\6\1\u0152"+
    "\16\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\5\6\1\u0153\2\6\1\0\26\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\10\6\1\0\4\6\1\126\21\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\3\6\1\u0154\4\6\1\0\26\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\10\6\1\0\7\6\1\u0155\16\6\10\0\3\113\4\u0156"+
    "\2\113\1\264\2\113\1\u0156\1\265\1\u0156\21\113\1\u0156"+
    "\2\113\1\u0156\2\113\1\u0156\3\113\1\u0156\1\113\1\u0156"+
    "\3\113\1\u0156\1\113\1\u0156\2\113\1\u0156\1\113\1\u0156"+
    "\1\113\1\u0156\11\113\1\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\7\6\1\u0157\1\0"+
    "\26\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\10\6\1\0\1\6\1\204\24\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\10\6\1\0\22\6\1\u0158\3\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\3\6\1\u0159\4\6\1\0\26\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\10\6\1\0\10\6\1\u015a\15\6\11\0\6\6\2\0"+
    "\1\75\3\6\1\0\1\6\5\0\1\6\7\0\10\6"+
    "\1\0\7\6\1\u015b\16\6\11\0\1\6\1\u015c\4\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\10\6\1\0\26\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\2\6\1\u015d\2\6"+
    "\1\u015e\2\6\1\0\26\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\1\6\1\u015f"+
    "\6\6\1\0\26\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\10\6\1\0\5\6"+
    "\1\u0160\20\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\10\6\1\0\7\6\1\367"+
    "\16\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\3\6\1\u0161\4\6\1\0\26\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\10\6\1\0\23\6\1\u0162\2\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\5\6\1\u0163\2\6\1\0\26\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\6\6\1\320\1\6\1\0\10\6\1\305\15\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\10\6\1\0\2\6\1\u0164\23\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\312\7\0"+
    "\10\6\1\0\26\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\2\6\1\u012f\5\6"+
    "\1\0\26\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\1\6\1\u0165\6\6\1\0"+
    "\26\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\10\6\1\0\11\6\1\u0166\14\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\6\6\1\u012f\1\6\1\0\26\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\10\6\1\0\6\6\1\137\17\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\10\6\1\0\5\6\1\305\20\6\11\0\6\6\2\0"+
    "\1\75\3\6\1\0\1\6\5\0\1\6\7\0\7\6"+
    "\1\u0167\1\0\26\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\10\6\1\0\12\6"+
    "\1\305\13\6\11\0\1\6\1\u0168\4\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\10\6\1\0"+
    "\26\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\7\6\1\305\1\0\26\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\10\6\1\0\22\6\1\u0169\3\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\7\6\1\u0125\1\0\26\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\1\6\1\u012f"+
    "\6\6\1\0\26\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\1\u016a\6\6\1\312"+
    "\1\0\26\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\7\6\1\312\1\0\26\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\6\6\1\u016b\1\6\1\0\26\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\5\6\1\257\2\6\1\0\26\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\5\6\1\137\2\6\1\0\26\6\11\0\6\6\2\0"+
    "\1\75\3\6\1\0\1\6\5\0\1\6\7\0\10\6"+
    "\1\0\6\6\1\167\17\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\10\6\1\0"+
    "\2\6\1\u016c\23\6\11\0\1\6\1\u016d\4\6\2\0"+
    "\1\75\3\6\1\0\1\6\5\0\1\6\7\0\10\6"+
    "\1\0\26\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\10\6\1\0\7\6\1\305"+
    "\16\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\10\6\1\0\1\6\1\215\24\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\3\6\1\u016e\4\6\1\0\7\6\1\u016f"+
    "\16\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\10\6\1\0\15\6\1\220\10\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\5\6\1\u0170\2\6\1\0\26\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\7\6\1\u0171\1\0\26\6\11\0\6\6\2\0"+
    "\1\75\1\6\1\u0172\1\6\1\0\1\6\5\0\1\6"+
    "\7\0\10\6\1\0\26\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\10\6\1\0"+
    "\16\6\1\u0173\7\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\10\6\1\0\21\6"+
    "\1\305\4\6\47\0\1\u0100\4\0\1\u0147\60\0\1\u0174"+
    "\61\0\1\u0148\1\u0175\4\u0148\1\u0175\2\0\3\u0148\1\0"+
    "\1\u0148\1\0\1\u0175\1\0\1\u0148\1\u0175\1\u0148\1\0"+
    "\6\u0175\10\u0148\1\u0175\26\u0148\1\0\3\u0175\43\0\1\u0104"+
    "\4\0\1\u014a\60\0\1\u0176\61\0\1\u014b\1\u0177\4\u014b"+
    "\1\u0177\2\0\3\u014b\1\0\1\u014b\1\0\1\u0177\1\0"+
    "\1\u014b\1\u0177\1\u014b\1\0\6\u0177\10\u014b\1\u0177\26\u014b"+
    "\1\0\3\u0177\43\0\1\u0108\4\0\1\u014d\60\0\1\u0178"+
    "\61\0\1\u014e\1\u0179\4\u014e\1\u0179\2\0\3\u014e\1\0"+
    "\1\u014e\1\0\1\u0179\1\0\1\u014e\1\u0179\1\u014e\1\0"+
    "\6\u0179\10\u014e\1\u0179\26\u014e\1\0\3\u0179\7\0\4\u017a"+
    "\5\0\1\u017a\1\0\1\u017a\21\0\1\u017a\2\0\1\u017a"+
    "\2\0\1\u017a\3\0\1\u017a\1\0\1\u017a\3\0\1\u017a"+
    "\1\0\1\u017a\2\0\1\u017a\1\0\1\u017a\1\0\1\u017a"+
    "\11\0\3\247\4\u017b\1\101\1\0\3\247\1\u017b\1\247"+
    "\1\u017b\21\247\1\u017b\2\247\1\u017b\2\247\1\u017b\3\247"+
    "\1\u017b\1\247\1\u017b\3\247\1\u017b\1\247\1\u017b\2\247"+
    "\1\u017b\1\247\1\u017b\1\247\1\u017b\11\247\1\0\6\6"+
    "\2\0\1\75\1\6\1\u017c\1\6\1\0\1\6\5\0"+
    "\1\6\7\0\10\6\1\0\26\6\11\0\6\6\2\0"+
    "\1\75\3\6\1\0\1\6\5\0\1\6\7\0\7\6"+
    "\1\u017c\1\0\26\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\3\6\1\312\4\6"+
    "\1\0\26\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\7\6\1\u0162\1\0\26\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\3\6\1\u017d\4\6\1\0\26\6\10\0"+
    "\3\113\4\u017e\2\113\1\264\2\113\1\u017e\1\265\1\u017e"+
    "\21\113\1\u017e\2\113\1\u017e\2\113\1\u017e\3\113\1\u017e"+
    "\1\113\1\u017e\3\113\1\u017e\1\113\1\u017e\2\113\1\u017e"+
    "\1\113\1\u017e\1\113\1\u017e\11\113\1\0\6\6\2\0"+
    "\1\75\3\6\1\0\1\6\5\0\1\6\7\0\10\6"+
    "\1\0\2\6\1\167\23\6\11\0\6\6\2\0\1\75"+
    "\1\6\1\u017f\1\6\1\0\1\6\5\0\1\6\7\0"+
    "\2\6\1\325\1\6\1\327\3\6\1\0\1\6\1\u0180"+
    "\24\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\10\6\1\0\6\6\1\u0164\17\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\3\6\1\u0181\4\6\1\0\26\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\10\6\1\0\6\6\1\304\17\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\1\6\1\u0182\6\6\1\0\1\6\1\u0183\1\u0184\23\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\10\6\1\0\1\6\1\u0185\24\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\10\6\1\0\5\6\1\126\20\6\11\0\6\6"+
    "\2\0\1\75\1\145\2\6\1\0\1\6\5\0\1\6"+
    "\7\0\10\6\1\0\26\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\1\126\7\6"+
    "\1\0\26\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\1\6\1\167\6\6\1\0"+
    "\26\6\11\0\1\6\1\u0186\4\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\10\6\1\0\26\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\10\6\1\0\1\6\1\320\24\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\4\6\1\305\3\6\1\0\26\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\1\305\7\6\1\0\26\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\7\6\1\u013c"+
    "\1\0\26\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\10\6\1\0\1\6\1\305"+
    "\24\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\3\6\1\u0187\4\6\1\0\26\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\2\6\1\u0188\5\6\1\0\26\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\10\6\1\0\6\6\1\u0189\17\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\10\6\1\0\6\6\1\u018a\17\6\11\0\6\6\2\0"+
    "\1\75\1\6\1\126\1\6\1\0\1\6\5\0\1\6"+
    "\7\0\10\6\1\0\26\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\3\6\1\u018b"+
    "\4\6\1\0\26\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\1\6\1\u018c\6\6"+
    "\1\0\26\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\5\6\1\u018d\2\6\1\0"+
    "\26\6\11\0\6\6\2\0\1\75\1\6\1\u018e\1\6"+
    "\1\0\1\6\5\0\1\6\7\0\10\6\1\0\26\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\u018f\7\0\10\6\1\0\26\6\11\0\6\6\2\0"+
    "\1\75\3\6\1\0\1\6\5\0\1\6\7\0\10\6"+
    "\1\0\7\6\1\167\16\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\10\6\1\0"+
    "\17\6\1\305\6\6\32\0\1\u0148\102\0\1\u014b\102\0"+
    "\1\u014e\63\0\4\6\5\0\1\6\1\0\1\6\21\0"+
    "\1\6\2\0\1\6\2\0\1\6\3\0\1\6\1\0"+
    "\1\6\3\0\1\6\1\0\1\6\2\0\1\6\1\0"+
    "\1\6\1\0\1\6\11\0\3\247\4\100\1\101\1\0"+
    "\3\247\1\100\1\247\1\100\21\247\1\100\2\247\1\100"+
    "\2\247\1\100\3\247\1\100\1\247\1\100\3\247\1\100"+
    "\1\247\1\100\2\247\1\100\1\247\1\100\1\247\1\100"+
    "\11\247\1\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\10\6\1\0\5\6\1\u0190\20\6"+
    "\11\0\1\6\1\u0191\4\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\10\6\1\0\26\6\10\0"+
    "\3\113\4\16\2\113\1\264\2\113\1\16\1\265\1\16"+
    "\21\113\1\16\2\113\1\16\2\113\1\16\3\113\1\16"+
    "\1\113\1\16\3\113\1\16\1\113\1\16\2\113\1\16"+
    "\1\113\1\16\1\113\1\16\11\113\1\0\6\6\2\0"+
    "\1\75\1\u0192\2\6\1\0\1\6\5\0\1\6\7\0"+
    "\10\6\1\0\26\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\3\6\1\u0193\4\6"+
    "\1\0\26\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\10\6\1\0\22\6\1\u0194"+
    "\3\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\10\6\1\0\6\6\1\u0195\17\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\10\6\1\0\1\u0196\25\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\10\6\1\0\1\6\1\355\24\6\11\0\6\6\2\0"+
    "\1\75\1\6\1\153\1\6\1\0\1\6\5\0\1\6"+
    "\7\0\10\6\1\0\26\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\10\6\1\0"+
    "\2\6\1\u0197\23\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\1\6\1\u0198\6\6"+
    "\1\0\26\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\10\6\1\0\1\6\1\u0199"+
    "\24\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\10\6\1\0\1\u019a\25\6\11\0"+
    "\6\6\2\0\1\75\1\6\1\u012f\1\6\1\0\1\6"+
    "\5\0\1\6\7\0\10\6\1\0\26\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\7\6\1\u0166\1\0\26\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\7\6\1\u019b"+
    "\1\0\26\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\3\6\1\312\4\6\1\0"+
    "\2\6\1\305\23\6\11\0\6\6\2\0\1\75\1\342"+
    "\2\6\1\0\1\6\5\0\1\6\7\0\10\6\1\0"+
    "\26\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\1\6\1\u013f\6\6\1\0\26\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\10\6\1\0\6\6\1\u019c\17\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\10\6\1\0\7\6\1\u010f\16\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\10\6\1\0\10\6\1\305\15\6\11\0\6\6\2\0"+
    "\1\75\3\6\1\0\1\6\5\0\1\6\7\0\10\6"+
    "\1\0\5\6\1\u019d\20\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\10\6\1\0"+
    "\1\u019e\25\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\10\6\1\0\1\6\1\u019f"+
    "\24\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\3\6\1\u012b\4\6\1\0\26\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\10\6\1\0\1\6\1\u01a0\24\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\10\6\1\0\2\6\1\u01a1\23\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\10\6\1\0\26\6\1\u01a2\10\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\2\6\1\u0136"+
    "\5\6\1\0\26\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\10\6\1\0\7\6"+
    "\1\u012f\16\6\11\0\6\6\2\0\1\75\3\6\1\0"+
    "\1\6\5\0\1\6\7\0\5\6\1\u01a3\2\6\1\0"+
    "\26\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\10\6\1\0\1\6\1\u01a4\24\6"+
    "\11\0\6\6\2\0\1\75\3\6\1\0\1\6\5\0"+
    "\1\6\7\0\10\6\1\0\23\6\1\305\2\6\11\0"+
    "\6\6\2\0\1\75\3\6\1\0\1\6\5\0\1\6"+
    "\7\0\1\6\1\u01a5\6\6\1\0\26\6\11\0\6\6"+
    "\2\0\1\75\3\6\1\0\1\6\5\0\1\6\7\0"+
    "\10\6\1\0\1\6\1\u01a6\24\6\11\0\6\6\2\0"+
    "\1\75\3\6\1\0\1\6\5\0\1\6\7\0\5\6"+
    "\1\305\2\6\1\0\26\6\11\0\6\6\2\0\1\75"+
    "\3\6\1\0\1\6\5\0\1\6\7\0\10\6\1\0"+
    "\2\6\1\u0172\23\6\11\0\6\6\2\0\1\75\3\6"+
    "\1\0\1\6\5\0\1\6\7\0\7\6\1\167\1\0"+
    "\26\6\11\0\6\6\2\0\1\75\3\6\1\0\1\6"+
    "\5\0\1\6\7\0\10\6\1\0\10\6\1\167\15\6"+
    "\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26465];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\4\1\1\11\7\1\2\11\32\1\1\11"+
    "\4\1\1\11\5\1\1\11\3\1\1\0\3\1\1\11"+
    "\1\0\12\1\2\11\110\1\1\11\4\0\1\11\11\0"+
    "\2\1\1\11\14\1\1\11\1\1\1\11\107\1\15\0"+
    "\72\1\2\0\1\1\2\0\1\1\2\0\1\1\1\0"+
    "\44\1\7\0\47\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[422];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public DMTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + this.offsetShift;
		this.addToken(this.zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		this.addToken(this.zzStartRead, this.zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + this.offsetShift;
		this.addToken(this.zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		this.zzStartRead = this.zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	@Override
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	@Override
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		this.resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				this.start = text.offset;
				break;

						case Token.COMMENT_DOCUMENTATION:
				state = DOCCOMMENT;
				this.start = text.offset;
				break;

			default:
				state = Token.NULL;
		}

		this.s = text;
		try {
			this.yyreset(this.zzReader);
			this.yybegin(state);
			return this.yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return this.zzCurrentPos>=this.s.offset+this.s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		this.zzBuffer = this.s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		this.zzStartRead = this.s.offset;
		this.zzEndRead = this.zzStartRead + this.s.count - 1;
		this.zzCurrentPos = this.zzMarkedPos = this.zzPushbackPos = this.s.offset;
		this.zzLexicalState = YYINITIAL;
		this.zzReader = reader;
		this.zzAtBOL  = true;
		this.zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DMTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public DMTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    this.zzAtEOF = true;            /* indicate end of file */
    this.zzEndRead = this.zzStartRead;  /* invalidate buffer    */

    if (this.zzReader != null)
      this.zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  @Override
public final void yybegin(int newState) {
    this.zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( this.zzBuffer, this.zzStartRead, this.zzMarkedPos-this.zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return this.zzBuffer[this.zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return this.zzMarkedPos-this.zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > this.yylength() )
      this.zzScanError(ZZ_PUSHBACK_2BIG);

    this.zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = this.zzEndRead;
    char [] zzBufferL = this.zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = this.zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = this.zzCurrentPos = this.zzStartRead = zzMarkedPosL;

      this.zzState = this.zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (this.zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            this.zzCurrentPos  = zzCurrentPosL;
            this.zzMarkedPos   = zzMarkedPosL;
            boolean eof = this.zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = this.zzCurrentPos;
            zzMarkedPosL   = this.zzMarkedPos;
            zzBufferL      = this.zzBuffer;
            zzEndReadL     = this.zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[this.zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          this.zzState = zzNext;

          int zzAttributes = zzAttrL[this.zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = this.zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      this.zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 28:
          { int temp=this.zzStartRead; this.addToken(this.start,this.zzStartRead-1, Token.COMMENT_DOCUMENTATION); this.addHyperlinkToken(temp,this.zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); this.start = this.zzMarkedPos;
          }
        case 30: break;
        case 4:
          { this.addNullToken(); return this.firstToken;
          }
        case 31: break;
        case 22:
          { this.addToken(Token.LITERAL_CHAR);
          }
        case 32: break;
        case 17:
          { this.start = this.zzMarkedPos-2; this.yybegin(MLC);
          }
        case 33: break;
        case 6:
          { this.addToken(Token.WHITESPACE);
          }
        case 34: break;
        case 21:
          { this.addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 35: break;
        case 23:
          { this.addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 36: break;
        case 20:
          { this.yybegin(YYINITIAL); this.addToken(this.start,this.zzStartRead+2-1, Token.COMMENT_DOCUMENTATION);
          }
        case 37: break;
        case 18:
          { this.addToken(Token.RESERVED_WORD);
          }
        case 38: break;
        case 8:
          { this.addToken(Token.SEPARATOR);
          }
        case 39: break;
        case 1:
          { this.addToken(Token.IDENTIFIER);
          }
        case 40: break;
        case 12:
          { this.addToken(this.start,this.zzStartRead-1, Token.COMMENT_EOL); this.addNullToken(); return this.firstToken;
          }
        case 41: break;
        case 16:
          { this.start = this.zzMarkedPos-2; this.yybegin(EOL_COMMENT);
          }
        case 42: break;
        case 25:
          { this.addToken(Token.FUNCTION);
          }
        case 43: break;
        case 3:
          { this.addToken(Token.ERROR_CHAR); this.addNullToken(); return this.firstToken;
          }
        case 44: break;
        case 5:
          { this.addToken(Token.ERROR_STRING_DOUBLE); this.addNullToken(); return this.firstToken;
          }
        case 45: break;
        case 19:
          { this.yybegin(YYINITIAL); this.addToken(this.start,this.zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 46: break;
        case 14:
          { this.addToken(Token.ERROR_CHAR);
          }
        case 47: break;
        case 11:
          { this.addToken(this.start,this.zzStartRead-1, Token.COMMENT_DOCUMENTATION); return this.firstToken;
          }
        case 48: break;
        case 24:
          { this.start = this.zzMarkedPos-3; this.yybegin(DOCCOMMENT);
          }
        case 49: break;
        case 15:
          { this.addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 50: break;
        case 29:
          { int temp=this.zzStartRead; this.addToken(this.start,this.zzStartRead-1, Token.COMMENT_EOL); this.addHyperlinkToken(temp,this.zzMarkedPos-1, Token.COMMENT_EOL); this.start = this.zzMarkedPos;
          }
        case 51: break;
        case 27:
          { int temp=this.zzStartRead; this.addToken(this.start,this.zzStartRead-1, Token.COMMENT_MULTILINE); this.addHyperlinkToken(temp,this.zzMarkedPos-1, Token.COMMENT_MULTILINE); this.start = this.zzMarkedPos;
          }
        case 52: break;
        case 26:
          { this.addToken(Token.RESERVED_WORD_2);
          }
        case 53: break;
        case 13:
          { this.addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 54: break;
        case 2:
          { this.addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 55: break;
        case 7:
          { this.addToken(Token.OPERATOR);
          }
        case 56: break;
        case 9:
          {
          }
        case 57: break;
        case 10:
          { this.addToken(this.start,this.zzStartRead-1, Token.COMMENT_MULTILINE); return this.firstToken;
          }
        case 58: break;
        default:
          if (zzInput == YYEOF && this.zzStartRead == this.zzCurrentPos) {
            this.zzAtEOF = true;
            switch (this.zzLexicalState) {
            case EOL_COMMENT: {
              this.addToken(this.start,this.zzStartRead-1, Token.COMMENT_EOL); this.addNullToken(); return this.firstToken;
            }
            case 423: break;
            case DOCCOMMENT: {
              this.yybegin(YYINITIAL); this.addToken(this.start,this.zzEndRead, Token.COMMENT_DOCUMENTATION); return this.firstToken;
            }
            case 424: break;
            case YYINITIAL: {
              this.addNullToken(); return this.firstToken;
            }
            case 425: break;
            case MLC: {
              this.addToken(this.start,this.zzStartRead-1, Token.COMMENT_MULTILINE); return this.firstToken;
            }
            case 426: break;
            default:
            return null;
            }
          }
          else {
            this.zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

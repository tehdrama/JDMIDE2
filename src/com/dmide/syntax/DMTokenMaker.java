/* The following code was generated by JFlex 1.4.3 on 9/21/12 9:12 PM */

/*
 * Generated on 9/21/12 8:02 PM
 */
package com.dmide.syntax;

import java.io.IOException;
import java.io.Reader;

import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.AbstractJFlexCTokenMaker;
import org.fife.ui.rsyntaxtextarea.DefaultToken;
import org.fife.ui.rsyntaxtextarea.Token;


/**
 * Token maker for DMIDE.
 */

public class DMTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 6;
  public static final int DOCCOMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  1,  2,  3,  4,  5,  6, 7
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\40\1\10\1\0\1\40\1\17\22\0\1\40\1\73\1\15"+
    "\1\20\1\21\1\55\1\75\1\7\2\46\1\43\1\52\1\76\1\77"+
    "\1\47\1\42\1\4\3\16\4\6\2\3\1\57\1\53\1\100\1\74"+
    "\1\101\1\51\1\50\1\72\3\5\1\67\1\64\2\1\1\65\2\1"+
    "\1\66\1\71\1\70\14\1\1\46\1\11\1\46\1\102\1\2\1\0"+
    "\1\35\1\14\1\33\1\22\1\23\1\24\1\36\1\56\1\25\1\63"+
    "\1\61\1\27\1\37\1\26\1\32\1\34\1\1\1\31\1\30\1\13"+
    "\1\12\1\62\1\60\1\45\2\1\1\44\1\103\1\41\1\54\uff81\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\3\1\2\2\1\3\1\4\2\1\1\5\20\1"+
    "\1\6\1\7\2\10\1\7\1\1\5\10\2\1\3\10"+
    "\1\1\5\10\1\11\1\12\6\11\1\13\4\11\1\14"+
    "\3\11\4\1\1\0\2\1\1\15\2\2\3\15\1\3"+
    "\1\16\1\0\1\3\1\1\1\17\2\1\3\5\1\20"+
    "\7\0\1\1\1\17\3\1\2\17\14\1\1\17\4\1"+
    "\1\6\1\21\1\22\2\10\1\23\3\10\3\1\7\10"+
    "\2\0\1\24\2\0\1\25\11\0\3\1\3\26\1\3"+
    "\2\27\2\3\1\16\2\3\1\1\1\17\1\1\1\5"+
    "\1\0\6\5\1\30\5\0\1\31\3\0\1\17\2\1"+
    "\1\17\1\1\1\17\3\1\1\17\3\1\1\32\4\1"+
    "\1\17\2\1\1\32\2\1\1\17\2\10\17\0\3\1"+
    "\5\3\1\32\1\1\11\5\1\20\13\0\1\1\1\17"+
    "\2\32\1\17\6\1\1\17\2\32\1\1\1\17\1\1"+
    "\1\17\3\0\1\33\3\0\1\34\3\0\1\35\3\0"+
    "\3\1\4\3\1\17\1\5\1\30\4\5\3\0\2\31"+
    "\4\0\1\31\1\0\1\32\1\1\1\32\3\1\1\17"+
    "\1\1\1\17\2\0\1\33\1\0\2\33\1\0\1\33"+
    "\4\0\1\34\1\0\2\34\1\0\1\34\4\0\1\35"+
    "\1\0\2\35\1\0\1\35\5\0\3\1\3\3\3\5"+
    "\1\31\1\0\3\31\3\0\3\17\1\1\1\17\1\33"+
    "\1\34\1\35\6\1\3\3\3\5\2\31\1\0\1\31"+
    "\1\1\4\31\1\17";

  private static int [] zzUnpackAction() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\0\0\104\0\104\0\210\0\210\0\314\0\314"+
    "\0\u0110\0\u0154\0\u0198\0\u01dc\0\u0220\0\u0264\0\u0110\0\u02a8"+
    "\0\u02ec\0\u0330\0\u0374\0\u0154\0\u03b8\0\u03fc\0\u0440\0\u0484"+
    "\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c\0\u0660\0\u06a4"+
    "\0\u06e8\0\u072c\0\u0770\0\u0110\0\u07b4\0\u07f8\0\u083c\0\u0110"+
    "\0\u0110\0\u0880\0\u0110\0\u08c4\0\u0110\0\u0908\0\u094c\0\u0110"+
    "\0\u0990\0\u09d4\0\u0110\0\u0a18\0\u0a5c\0\u0aa0\0\u0110\0\u0ae4"+
    "\0\u0b28\0\u0110\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0"+
    "\0\u0110\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0110\0\u0e14\0\u0e58"+
    "\0\u0e9c\0\u0154\0\u0154\0\u0154\0\u0154\0\u0ee0\0\u0154\0\u0f24"+
    "\0\u0f68\0\u01dc\0\u01dc\0\u0f68\0\u0f68\0\u0fac\0\u0ff0\0\u0110"+
    "\0\u1034\0\u1078\0\u10bc\0\u0154\0\u1100\0\u1144\0\u0330\0\u1188"+
    "\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8"+
    "\0\u0374\0\u13ec\0\u0154\0\u1430\0\u1474\0\u14b8\0\u0154\0\u0154"+
    "\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8"+
    "\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u0154\0\u182c\0\u1870\0\u18b4"+
    "\0\u18f8\0\u0770\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110"+
    "\0\u0110\0\u0110\0\u193c\0\u1980\0\u19c4\0\u0110\0\u0110\0\u0110"+
    "\0\u0110\0\u1a08\0\u1a4c\0\u0110\0\u1a90\0\u1ad4\0\u0110\0\u1b18"+
    "\0\u1b5c\0\u0110\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4"+
    "\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u0fac\0\u0fac"+
    "\0\u0fac\0\u1ed0\0\u0110\0\u0110\0\u1f14\0\u1f58\0\u1034\0\u0ff0"+
    "\0\u1f9c\0\u1fe0\0\u0154\0\u2024\0\u2068\0\u1210\0\u1188\0\u20ac"+
    "\0\u20f0\0\u0330\0\u2134\0\u2178\0\u0110\0\u21bc\0\u2200\0\u2244"+
    "\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc\0\u0154\0\u2420"+
    "\0\u2464\0\u0154\0\u24a8\0\u0154\0\u24ec\0\u2530\0\u2574\0\u0154"+
    "\0\u25b8\0\u25fc\0\u2640\0\u0154\0\u2684\0\u26c8\0\u270c\0\u2750"+
    "\0\u0154\0\u2794\0\u27d8\0\u0154\0\u281c\0\u2860\0\u0154\0\u0110"+
    "\0\u0110\0\u28a4\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u2a3c"+
    "\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4\0\u2bd4\0\u2bd4"+
    "\0\u2c18\0\u2c5c\0\u2ca0\0\u2ce4\0\u0ff0\0\u2d28\0\u2d28\0\u2d28"+
    "\0\u0154\0\u2d6c\0\u2db0\0\u2df4\0\u0330\0\u2e38\0\u2e38\0\u2e38"+
    "\0\u0330\0\u1188\0\u11cc\0\u1210\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48"+
    "\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u30e0\0\u3124\0\u3168"+
    "\0\u0154\0\u0154\0\u0154\0\u0154\0\u31ac\0\u31f0\0\u3234\0\u3278"+
    "\0\u32bc\0\u3300\0\u0154\0\u0154\0\u0154\0\u3344\0\u0154\0\u3388"+
    "\0\u0154\0\u33cc\0\u28a4\0\u3410\0\u3454\0\u3498\0\u29b4\0\u34dc"+
    "\0\u3520\0\u3564\0\u2ac4\0\u35a8\0\u35ec\0\u3630\0\u3630\0\u3630"+
    "\0\u3674\0\u36b8\0\u36fc\0\u0ff0\0\u3740\0\u3740\0\u3740\0\u0154"+
    "\0\u2068\0\u1210\0\u0330\0\u3784\0\u3784\0\u3784\0\u37c8\0\u380c"+
    "\0\u3850\0\u0110\0\u0110\0\u3894\0\u38d8\0\u391c\0\u3960\0\u0110"+
    "\0\u39a4\0\u0154\0\u39e8\0\u0154\0\u3a2c\0\u3a70\0\u3ab4\0\u0154"+
    "\0\u3af8\0\u0154\0\u3b3c\0\u28a4\0\u3454\0\u3454\0\u3454\0\u3454"+
    "\0\u3454\0\u3454\0\u3454\0\u3454\0\u3b80\0\u29b4\0\u3520\0\u3520"+
    "\0\u3520\0\u3520\0\u3520\0\u3520\0\u3520\0\u3520\0\u3bc4\0\u2ac4"+
    "\0\u35ec\0\u35ec\0\u35ec\0\u35ec\0\u35ec\0\u35ec\0\u35ec\0\u35ec"+
    "\0\u3c08\0\u3c08\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u3d18\0\u3d18"+
    "\0\u3d18\0\u3d5c\0\u3d5c\0\u3d5c\0\u0110\0\u3da0\0\u0110\0\u0110"+
    "\0\u0110\0\u3de4\0\u3e28\0\u3e6c\0\u0154\0\u0154\0\u0154\0\u3eb0"+
    "\0\u0154\0\u3454\0\u3520\0\u35ec\0\u0154\0\u0154\0\u0154\0\u3ef4"+
    "\0\u3f38\0\u3f7c\0\u0ff0\0\u0ff0\0\u0ff0\0\u0330\0\u0330\0\u0330"+
    "\0\u0110\0\u0110\0\u3fc0\0\u0110\0\u4004\0\u0154\0\u0154\0\u0154"+
    "\0\u0110\0\u0154";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\15\1\12\1\14\1\16"+
    "\1\17\1\11\1\12\1\20\1\21\1\22\1\14\1\11"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\12\1\44\1\50"+
    "\1\11\1\51\1\52\1\50\1\53\1\54\1\12\1\55"+
    "\1\56\1\12\1\57\10\12\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\10\71\1\72\13\71"+
    "\1\73\16\71\1\74\12\71\1\75\1\71\1\76\23\71"+
    "\7\77\1\100\1\101\13\77\1\102\31\77\1\103\1\77"+
    "\1\104\23\77\10\105\1\106\13\105\1\107\31\105\1\110"+
    "\1\105\1\111\23\105\105\0\1\112\1\113\1\114\1\115"+
    "\1\112\1\114\2\0\1\116\3\112\1\0\1\114\2\0"+
    "\1\117\16\112\5\0\1\112\10\0\1\112\1\0\13\112"+
    "\12\0\1\112\1\120\1\114\1\115\1\112\1\114\2\0"+
    "\1\116\3\112\1\0\1\114\2\0\1\117\16\112\5\0"+
    "\1\112\10\0\1\112\1\0\13\112\11\0\3\121\1\122"+
    "\1\123\1\121\1\122\2\0\1\124\3\121\1\0\1\122"+
    "\1\0\1\125\17\121\5\0\1\121\2\0\1\121\5\0"+
    "\1\121\1\0\13\121\11\0\3\121\1\122\1\123\1\121"+
    "\1\122\2\0\1\124\3\121\1\0\1\122\1\0\1\125"+
    "\17\121\5\0\1\126\2\0\1\121\5\0\1\121\1\0"+
    "\13\121\11\0\7\127\1\130\1\131\1\132\72\127\1\0"+
    "\1\112\1\113\1\114\1\115\1\112\1\114\2\0\1\116"+
    "\1\133\2\112\1\0\1\114\2\0\1\117\10\112\1\134"+
    "\4\112\1\135\5\0\1\112\10\0\1\112\1\0\13\112"+
    "\12\0\1\112\1\113\1\114\1\115\1\112\1\114\2\0"+
    "\1\116\3\112\1\0\1\114\2\0\1\117\7\112\1\136"+
    "\6\112\5\0\1\112\10\0\1\112\1\0\13\112\11\0"+
    "\10\137\1\140\1\141\3\137\1\142\66\137\12\0\1\143"+
    "\7\0\1\144\1\145\1\0\1\146\1\0\1\147\4\0"+
    "\1\150\3\0\1\151\44\0\1\112\1\113\1\114\1\115"+
    "\1\112\1\114\2\0\1\116\3\112\1\0\1\114\2\0"+
    "\1\117\1\112\1\152\6\112\1\153\2\112\1\154\2\112"+
    "\5\0\1\112\10\0\1\112\1\0\13\112\12\0\1\112"+
    "\1\113\1\114\1\115\1\112\1\114\2\0\1\116\3\112"+
    "\1\0\1\114\2\0\1\117\5\112\1\155\10\112\5\0"+
    "\1\112\10\0\1\112\1\0\13\112\12\0\1\112\1\113"+
    "\1\114\1\115\1\112\1\114\2\0\1\116\3\112\1\0"+
    "\1\114\2\0\1\117\10\112\1\156\5\112\5\0\1\112"+
    "\10\0\1\112\1\0\13\112\12\0\1\112\1\113\1\114"+
    "\1\115\1\112\1\114\2\0\1\116\3\112\1\0\1\114"+
    "\2\0\1\117\2\112\1\157\1\112\1\160\4\112\1\161"+
    "\4\112\5\0\1\112\10\0\1\112\1\0\13\112\12\0"+
    "\1\112\1\113\1\114\1\115\1\112\1\114\2\0\1\116"+
    "\3\112\1\0\1\114\2\0\1\117\1\112\1\162\14\112"+
    "\5\0\1\112\10\0\1\112\1\0\13\112\12\0\1\112"+
    "\1\113\1\114\1\115\1\112\1\114\2\0\1\116\3\112"+
    "\1\0\1\114\2\0\1\117\3\112\1\163\12\112\5\0"+
    "\1\112\10\0\1\112\1\0\13\112\12\0\1\112\1\113"+
    "\1\114\1\115\1\112\1\114\2\0\1\116\1\112\1\164"+
    "\1\112\1\0\1\114\2\0\1\117\1\112\1\165\6\112"+
    "\1\166\5\112\5\0\1\112\10\0\1\112\1\0\1\167"+
    "\12\112\12\0\1\112\1\113\1\114\1\115\1\112\1\114"+
    "\2\0\1\116\3\112\1\0\1\114\2\0\1\117\1\112"+
    "\1\170\14\112\5\0\1\112\10\0\1\112\1\0\13\112"+
    "\12\0\1\112\1\113\1\114\1\115\1\112\1\114\2\0"+
    "\1\116\2\112\1\171\1\0\1\114\2\0\1\117\16\112"+
    "\5\0\1\112\10\0\1\112\1\0\13\112\12\0\1\112"+
    "\1\113\1\114\1\115\1\112\1\114\2\0\1\116\3\112"+
    "\1\0\1\114\2\0\1\117\10\112\1\172\5\112\5\0"+
    "\1\112\10\0\1\112\1\0\13\112\12\0\1\112\1\113"+
    "\1\114\1\115\1\112\1\114\2\0\1\116\3\112\1\0"+
    "\1\114\2\0\1\117\7\112\1\173\6\112\5\0\1\112"+
    "\10\0\1\112\1\0\13\112\12\0\1\112\1\113\1\114"+
    "\1\115\1\112\1\114\2\0\1\116\1\112\1\174\1\112"+
    "\1\0\1\114\2\0\1\117\6\112\1\175\1\176\6\112"+
    "\5\0\1\112\10\0\1\112\1\0\13\112\12\0\1\112"+
    "\1\113\1\114\1\115\1\112\1\114\2\0\1\116\3\112"+
    "\1\0\1\114\2\0\1\117\5\112\1\177\2\112\1\200"+
    "\5\112\5\0\1\112\10\0\1\112\1\0\13\112\12\0"+
    "\1\112\1\113\1\114\1\115\1\112\1\114\2\0\1\116"+
    "\3\112\1\0\1\114\2\0\1\117\10\112\1\201\5\112"+
    "\5\0\1\112\10\0\1\112\1\0\13\112\51\0\1\202"+
    "\105\0\1\203\1\204\30\0\1\205\103\0\1\206\16\0"+
    "\1\207\146\0\1\210\21\0\1\211\103\0\1\212\10\0"+
    "\1\112\1\113\1\114\1\115\1\112\1\114\2\0\1\116"+
    "\3\112\1\0\1\114\2\0\1\117\16\112\5\0\1\112"+
    "\10\0\1\213\1\0\13\112\12\0\1\112\1\113\1\114"+
    "\1\115\1\112\1\114\2\0\1\116\3\112\1\0\1\114"+
    "\2\0\1\117\1\112\1\214\11\112\1\215\2\112\5\0"+
    "\1\112\10\0\1\112\1\0\13\112\105\0\1\216\104\0"+
    "\1\217\102\0\1\220\2\0\1\221\104\0\1\222\104\0"+
    "\1\223\105\0\1\224\10\71\1\0\13\71\1\0\16\71"+
    "\1\0\12\71\1\0\1\71\1\0\23\71\13\0\1\225"+
    "\11\0\1\226\120\0\1\227\54\0\1\230\150\0\1\231"+
    "\23\0\7\77\2\0\13\77\1\0\31\77\1\0\1\77"+
    "\1\0\23\77\41\0\1\232\55\0\1\233\11\0\1\234"+
    "\71\0\1\235\150\0\1\236\23\0\10\105\1\0\13\105"+
    "\1\0\31\105\1\0\1\105\1\0\23\105\13\0\1\237"+
    "\11\0\1\240\71\0\1\241\150\0\1\242\35\0\1\243"+
    "\72\0\1\112\1\113\1\114\1\115\1\112\1\114\2\0"+
    "\1\116\3\112\1\0\1\114\2\0\1\117\16\112\5\0"+
    "\1\112\10\0\1\112\1\0\4\112\1\244\1\112\1\245"+
    "\2\112\1\246\1\112\11\0\7\121\2\0\1\124\3\121"+
    "\1\0\1\121\1\0\1\125\17\121\5\0\1\121\2\0"+
    "\1\121\5\0\1\121\1\0\13\121\11\0\3\121\1\247"+
    "\1\250\1\251\1\247\2\0\1\124\2\121\1\251\1\0"+
    "\1\247\1\0\1\125\1\121\3\251\6\121\1\251\1\121"+
    "\1\251\2\121\5\0\1\121\2\0\1\121\5\0\1\121"+
    "\1\0\4\121\1\251\2\121\1\251\2\121\1\251\11\0"+
    "\7\252\1\253\1\0\73\252\7\0\1\254\74\0\4\252"+
    "\1\255\1\252\1\256\1\257\1\0\1\260\1\261\3\260"+
    "\1\255\5\252\1\260\1\252\1\260\2\252\1\260\52\252"+
    "\1\0\1\112\1\113\1\114\1\115\1\112\1\114\2\0"+
    "\1\116\3\112\1\0\1\114\2\0\1\117\7\112\1\262"+
    "\6\112\5\0\1\112\10\0\1\112\1\0\13\112\12\0"+
    "\1\112\1\113\1\114\1\115\1\112\1\114\2\0\1\116"+
    "\3\112\1\0\1\114\2\0\1\117\12\112\1\263\3\112"+
    "\5\0\1\112\10\0\1\112\1\0\13\112\12\0\1\112"+
    "\1\113\1\114\1\115\1\112\1\114\2\0\1\116\3\112"+
    "\1\0\1\114\2\0\1\117\1\112\1\264\14\112\5\0"+
    "\1\112\10\0\1\112\1\0\13\112\11\0\11\140\1\265"+
    "\3\140\1\266\66\140\4\267\1\270\1\267\1\271\1\272"+
    "\1\0\1\272\1\273\2\272\1\274\1\270\5\267\1\272"+
    "\1\267\1\272\2\267\1\272\52\267\41\275\1\0\42\275"+
    "\26\0\1\276\100\0\1\277\106\0\1\300\1\301\1\0"+
    "\1\302\76\0\1\303\1\0\1\304\102\0\1\305\107\0"+
    "\1\306\53\0\1\112\1\113\1\114\1\115\1\112\1\114"+
    "\2\0\1\116\3\112\1\0\1\114\2\0\1\117\5\112"+
    "\1\307\10\112\5\0\1\112\10\0\1\112\1\0\13\112"+
    "\12\0\1\112\1\113\1\114\1\115\1\112\1\114\2\0"+
    "\1\116\1\112\1\310\1\112\1\0\1\114\2\0\1\117"+
    "\16\112\5\0\1\112\10\0\1\112\1\0\13\112\12\0"+
    "\1\112\1\113\1\114\1\115\1\112\1\114\2\0\1\116"+
    "\3\112\1\0\1\114\2\0\1\117\6\112\1\311\7\112"+
    "\5\0\1\112\10\0\1\112\1\0\13\112\12\0\1\112"+
    "\1\113\1\114\1\115\1\112\1\114\2\0\1\116\3\112"+
    "\1\0\1\114\2\0\1\117\7\112\1\312\6\112\5\0"+
    "\1\112\10\0\1\112\1\0\13\112\12\0\1\112\1\113"+
    "\1\114\1\115\1\112\1\114\2\0\1\116\3\112\1\0"+
    "\1\114\2\0\1\117\10\112\1\313\5\112\5\0\1\112"+
    "\10\0\1\112\1\0\13\112\12\0\1\112\1\113\1\114"+
    "\1\115\1\112\1\114\2\0\1\116\3\112\1\0\1\114"+
    "\2\0\1\117\16\112\5\0\1\112\10\0\1\112\1\0"+
    "\1\314\12\112\12\0\1\112\1\113\1\114\1\115\1\112"+
    "\1\114\2\0\1\116\3\112\1\0\1\114\2\0\1\117"+
    "\6\112\1\315\7\112\5\0\1\112\10\0\1\112\1\0"+
    "\13\112\12\0\1\112\1\113\1\114\1\115\1\112\1\114"+
    "\2\0\1\116\3\112\1\0\1\114\2\0\1\117\1\112"+
    "\1\316\11\112\1\317\2\112\5\0\1\112\10\0\1\112"+
    "\1\0\13\112\12\0\1\112\1\113\1\114\1\115\1\112"+
    "\1\114\2\0\1\116\1\112\1\320\1\112\1\0\1\114"+
    "\2\0\1\117\16\112\5\0\1\112\10\0\1\112\1\0"+
    "\13\112\12\0\1\112\1\113\1\114\1\115\1\112\1\114"+
    "\2\0\1\116\1\321\2\112\1\0\1\114\2\0\1\117"+
    "\16\112\5\0\1\112\10\0\1\112\1\0\13\112\12\0"+
    "\1\112\1\113\1\114\1\115\1\112\1\114\2\0\1\116"+
    "\3\112\1\0\1\114\2\0\1\117\3\112\1\322\12\112"+
    "\5\0\1\112\10\0\1\112\1\0\13\112\12\0\1\112"+
    "\1\113\1\114\1\115\1\112\1\114\2\0\1\116\1\112"+
    "\1\323\1\112\1\0\1\114\2\0\1\117\16\112\5\0"+
    "\1\112\10\0\1\112\1\0\13\112\12\0\1\112\1\113"+
    "\1\114\1\115\1\112\1\114\2\0\1\116\3\112\1\0"+
    "\1\114\2\0\1\117\16\112\5\0\1\112\10\0\1\112"+
    "\1\0\3\112\1\324\7\112\12\0\1\112\1\113\1\114"+
    "\1\115\1\112\1\114\2\0\1\116\3\112\1\0\1\114"+
    "\2\0\1\117\4\112\1\325\11\112\5\0\1\112\10\0"+
    "\1\112\1\0\13\112\12\0\1\112\1\113\1\114\1\115"+
    "\1\112\1\114\2\0\1\116\3\112\1\0\1\114\2\0"+
    "\1\117\10\112\1\326\5\112\5\0\1\112\10\0\1\112"+
    "\1\0\13\112\12\0\1\112\1\113\1\114\1\115\1\112"+
    "\1\114\2\0\1\116\3\112\1\0\1\114\2\0\1\117"+
    "\10\112\1\327\5\112\5\0\1\112\10\0\1\112\1\0"+
    "\13\112\12\0\1\112\1\113\1\114\1\115\1\112\1\114"+
    "\2\0\1\116\3\112\1\0\1\114\2\0\1\117\1\112"+
    "\1\330\12\112\1\331\1\112\5\0\1\112\10\0\1\112"+
    "\1\0\13\112\12\0\1\112\1\113\1\114\1\115\1\112"+
    "\1\114\2\0\1\116\3\112\1\0\1\114\2\0\1\117"+
    "\10\112\1\332\5\112\5\0\1\112\10\0\1\112\1\0"+
    "\13\112\12\0\1\112\1\113\1\114\1\115\1\112\1\114"+
    "\2\0\1\116\1\112\1\333\1\112\1\0\1\114\2\0"+
    "\1\117\16\112\5\0\1\112\10\0\1\112\1\0\13\112"+
    "\12\0\1\112\1\113\1\114\1\115\1\112\1\114\2\0"+
    "\1\116\2\112\1\334\1\0\1\114\2\0\1\117\16\112"+
    "\5\0\1\112\10\0\1\112\1\0\13\112\12\0\1\112"+
    "\1\113\1\114\1\115\1\112\1\114\2\0\1\116\3\112"+
    "\1\0\1\114\2\0\1\117\3\112\1\335\12\112\5\0"+
    "\1\112\10\0\1\112\1\0\13\112\12\0\1\112\1\113"+
    "\1\114\1\115\1\112\1\114\2\0\1\116\3\112\1\0"+
    "\1\114\2\0\1\117\7\112\1\336\6\112\5\0\1\112"+
    "\10\0\1\112\1\0\13\112\12\0\1\112\1\113\1\114"+
    "\1\115\1\112\1\114\2\0\1\116\3\112\1\0\1\114"+
    "\2\0\1\117\7\112\1\337\6\112\5\0\1\112\10\0"+
    "\1\112\1\0\13\112\105\0\1\340\103\0\1\341\43\0"+
    "\1\342\76\0\1\343\67\0\1\344\150\0\1\345\57\0"+
    "\1\346\76\0\1\347\67\0\1\350\150\0\1\351\57\0"+
    "\1\352\76\0\1\353\67\0\1\354\150\0\1\355\26\0"+
    "\1\356\1\357\1\360\1\356\5\0\1\360\1\0\1\356"+
    "\3\0\3\360\6\0\1\360\1\0\1\360\26\0\1\360"+
    "\2\0\1\360\2\0\1\360\12\0\1\112\1\113\1\114"+
    "\1\115\1\112\1\114\2\0\1\116\3\112\1\0\1\114"+
    "\2\0\1\117\16\112\5\0\1\112\10\0\1\112\1\0"+
    "\5\112\1\361\5\112\12\0\1\112\1\113\1\114\1\115"+
    "\1\112\1\114\2\0\1\116\3\112\1\0\1\114\2\0"+
    "\1\117\16\112\5\0\1\112\10\0\1\112\1\0\5\112"+
    "\1\362\5\112\12\0\1\112\1\113\1\114\1\115\1\112"+
    "\1\114\2\0\1\116\3\112\1\0\1\114\2\0\1\117"+
    "\16\112\5\0\1\112\10\0\1\112\1\0\12\112\1\363"+
    "\11\0\7\252\1\130\1\0\77\252\1\364\1\252\1\364"+
    "\1\253\1\0\5\252\1\364\71\252\1\365\1\252\1\365"+
    "\1\253\1\0\5\252\1\365\70\252\1\366\1\367\1\370"+
    "\1\366\1\130\1\0\3\252\1\370\1\252\1\366\3\252"+
    "\3\370\6\252\1\370\1\252\1\370\26\252\1\370\2\252"+
    "\1\370\2\252\1\370\11\252\1\0\1\112\1\113\1\114"+
    "\1\115\1\112\1\114\2\0\1\116\3\112\1\0\1\114"+
    "\2\0\1\117\2\112\1\371\13\112\5\0\1\112\10\0"+
    "\1\112\1\0\13\112\12\0\1\112\1\113\1\114\1\115"+
    "\1\112\1\114\2\0\1\116\3\112\1\0\1\114\2\0"+
    "\1\117\13\112\1\372\2\112\5\0\1\112\10\0\1\112"+
    "\1\0\13\112\11\0\10\267\1\0\4\267\1\373\66\267"+
    "\4\137\1\374\1\137\1\374\1\137\1\140\1\141\3\137"+
    "\1\142\1\374\71\137\1\375\1\137\1\375\1\137\1\140"+
    "\1\141\3\137\1\142\1\375\65\137\3\140\1\376\1\377"+
    "\1\u0100\1\376\2\140\1\265\2\140\1\u0100\1\266\1\376"+
    "\3\140\3\u0100\6\140\1\u0100\1\140\1\u0100\26\140\1\u0100"+
    "\2\140\1\u0100\2\140\1\u0100\11\140\10\u0101\1\u0102\1\u0103"+
    "\3\u0101\1\u0104\23\u0101\1\137\42\u0101\22\0\1\u0105\105\0"+
    "\1\u0106\101\0\1\u0107\106\0\1\u0108\2\0\1\u0109\104\0"+
    "\1\u010a\74\0\1\u010b\3\0\1\u010c\110\0\1\u010d\76\0"+
    "\1\u010e\112\0\1\u010f\47\0\1\112\1\113\1\114\1\115"+
    "\1\112\1\114\2\0\1\116\1\u0110\2\112\1\0\1\114"+
    "\2\0\1\117\16\112\5\0\1\112\10\0\1\112\1\0"+
    "\13\112\12\0\1\112\1\113\1\114\1\115\1\112\1\114"+
    "\2\0\1\116\3\112\1\0\1\114\2\0\1\117\1\112"+
    "\1\u0111\14\112\5\0\1\112\10\0\1\112\1\0\13\112"+
    "\12\0\1\112\1\113\1\114\1\115\1\112\1\114\2\0"+
    "\1\116\3\112\1\0\1\114\2\0\1\117\4\112\1\u0112"+
    "\11\112\5\0\1\112\10\0\1\112\1\0\13\112\12\0"+
    "\1\112\1\113\1\114\1\115\1\112\1\114\2\0\1\116"+
    "\1\112\1\u0113\1\112\1\0\1\114\2\0\1\117\16\112"+
    "\5\0\1\112\10\0\1\112\1\0\13\112\12\0\1\112"+
    "\1\113\1\114\1\115\1\112\1\114\2\0\1\116\3\112"+
    "\1\0\1\114\2\0\1\117\12\112\1\u0114\3\112\5\0"+
    "\1\112\10\0\1\112\1\0\13\112\12\0\1\112\1\113"+
    "\1\114\1\115\1\112\1\114\2\0\1\116\1\112\1\u0115"+
    "\1\112\1\0\1\114\2\0\1\117\16\112\5\0\1\112"+
    "\10\0\1\112\1\0\13\112\12\0\1\112\1\113\1\114"+
    "\1\115\1\112\1\114\2\0\1\116\3\112\1\0\1\114"+
    "\2\0\1\117\4\112\1\u0116\11\112\5\0\1\112\10\0"+
    "\1\112\1\0\13\112\12\0\1\112\1\113\1\114\1\115"+
    "\1\112\1\114\2\0\1\116\1\112\1\u0117\1\112\1\0"+
    "\1\114\2\0\1\117\16\112\5\0\1\112\10\0\1\112"+
    "\1\0\13\112\12\0\1\112\1\113\1\114\1\115\1\112"+
    "\1\114\2\0\1\116\1\u0118\2\112\1\0\1\114\2\0"+
    "\1\117\16\112\5\0\1\112\10\0\1\112\1\0\13\112"+
    "\12\0\1\112\1\113\1\114\1\115\1\112\1\114\2\0"+
    "\1\116\1\112\1\u0119\1\112\1\0\1\114\2\0\1\117"+
    "\6\112\1\u011a\7\112\5\0\1\112\10\0\1\112\1\0"+
    "\13\112\12\0\1\112\1\113\1\114\1\115\1\112\1\114"+
    "\2\0\1\116\3\112\1\0\1\114\2\0\1\117\11\112"+
    "\1\u011b\4\112\5\0\1\112\10\0\1\112\1\0\13\112"+
    "\12\0\1\112\1\113\1\114\1\115\1\112\1\114\2\0"+
    "\1\116\3\112\1\0\1\114\2\0\1\117\15\112\1\u011c"+
    "\5\0\1\112\10\0\1\112\1\0\13\112\12\0\1\112"+
    "\1\113\1\114\1\115\1\112\1\114\2\0\1\116\3\112"+
    "\1\0\1\114\2\0\1\117\13\112\1\u011d\2\112\5\0"+
    "\1\112\10\0\1\112\1\0\13\112\12\0\1\112\1\113"+
    "\1\114\1\115\1\112\1\114\2\0\1\116\2\112\1\u011e"+
    "\1\0\1\114\2\0\1\117\16\112\5\0\1\112\10\0"+
    "\1\112\1\0\13\112\12\0\1\112\1\113\1\114\1\115"+
    "\1\112\1\114\2\0\1\116\3\112\1\0\1\114\2\0"+
    "\1\117\10\112\1\u011f\5\112\5\0\1\112\10\0\1\112"+
    "\1\0\13\112\12\0\1\112\1\113\1\114\1\115\1\112"+
    "\1\114\2\0\1\116\3\112\1\0\1\114\2\0\1\117"+
    "\5\112\1\u0120\10\112\5\0\1\112\10\0\1\112\1\0"+
    "\13\112\12\0\1\112\1\113\1\114\1\115\1\112\1\114"+
    "\2\0\1\116\2\112\1\u0121\1\0\1\114\2\0\1\117"+
    "\16\112\5\0\1\112\10\0\1\112\1\0\13\112\70\0"+
    "\1\u0122\47\0\1\u0123\114\0\1\u0124\116\0\1\u0125\113\0"+
    "\1\u0126\47\0\1\u0127\114\0\1\u0128\116\0\1\u0129\113\0"+
    "\1\u012a\47\0\1\u012b\114\0\1\u012c\116\0\1\u012d\37\0"+
    "\1\u012e\1\u012f\1\u0130\1\u012e\5\0\1\u0130\1\0\1\u012e"+
    "\3\0\3\u0130\6\0\1\u0130\1\0\1\u0130\26\0\1\u0130"+
    "\2\0\1\u0130\2\0\1\u0130\12\0\1\112\1\113\1\114"+
    "\1\115\1\112\1\114\2\0\1\116\3\112\1\0\1\114"+
    "\2\0\1\117\16\112\5\0\1\112\10\0\1\112\1\0"+
    "\6\112\1\u0131\4\112\12\0\1\112\1\113\1\114\1\115"+
    "\1\112\1\114\2\0\1\116\3\112\1\0\1\114\2\0"+
    "\1\117\16\112\5\0\1\112\10\0\1\112\1\0\10\112"+
    "\1\u0132\2\112\12\0\1\112\1\113\1\114\1\115\1\112"+
    "\1\114\2\0\1\116\3\112\1\0\1\114\2\0\1\117"+
    "\16\112\5\0\1\112\10\0\1\112\1\0\5\112\1\u0133"+
    "\5\112\11\0\4\252\1\u0134\1\252\1\u0134\1\253\1\0"+
    "\5\252\1\u0134\70\252\1\u0135\1\u0136\1\u0137\1\u0135\1\130"+
    "\1\0\3\252\1\u0137\1\252\1\u0135\3\252\3\u0137\6\252"+
    "\1\u0137\1\252\1\u0137\26\252\1\u0137\2\252\1\u0137\2\252"+
    "\1\u0137\11\252\1\0\1\112\1\113\1\114\1\115\1\112"+
    "\1\114\2\0\1\116\3\112\1\0\1\114\2\0\1\117"+
    "\16\112\5\0\1\112\10\0\1\112\1\0\1\112\1\u0138"+
    "\11\112\11\0\11\u0102\1\u0139\3\u0102\1\u013a\23\u0102\1\140"+
    "\42\u0102\4\137\1\u013b\1\137\1\u013b\1\137\1\140\1\141"+
    "\3\137\1\142\1\u013b\65\137\3\140\1\u013c\1\u013d\1\u013e"+
    "\1\u013c\2\140\1\265\2\140\1\u013e\1\266\1\u013c\3\140"+
    "\3\u013e\6\140\1\u013e\1\140\1\u013e\26\140\1\u013e\2\140"+
    "\1\u013e\2\140\1\u013e\11\140\23\0\1\u013f\105\0\1\u0140"+
    "\103\0\1\u0141\102\0\1\u0142\102\0\1\u0143\112\0\1\u0144"+
    "\74\0\1\u0145\102\0\1\u0146\110\0\1\u0147\77\0\1\u0148"+
    "\116\0\1\u0149\46\0\1\112\1\113\1\114\1\115\1\112"+
    "\1\114\2\0\1\116\3\112\1\0\1\114\2\0\1\117"+
    "\15\112\1\u014a\5\0\1\112\10\0\1\112\1\0\13\112"+
    "\12\0\1\112\1\113\1\114\1\115\1\112\1\114\2\0"+
    "\1\116\3\112\1\0\1\114\2\0\1\117\3\112\1\u014b"+
    "\12\112\5\0\1\112\10\0\1\112\1\0\13\112\12\0"+
    "\1\112\1\113\1\114\1\115\1\112\1\114\2\0\1\116"+
    "\3\112\1\0\1\114\2\0\1\117\1\u014c\15\112\5\0"+
    "\1\112\10\0\1\112\1\0\13\112\12\0\1\112\1\113"+
    "\1\114\1\115\1\112\1\114\2\0\1\116\3\112\1\0"+
    "\1\114\2\0\1\117\11\112\1\u014d\4\112\5\0\1\112"+
    "\10\0\1\112\1\0\13\112\12\0\1\112\1\113\1\114"+
    "\1\115\1\112\1\114\2\0\1\116\3\112\1\0\1\114"+
    "\2\0\1\117\7\112\1\u014e\6\112\5\0\1\112\10\0"+
    "\1\112\1\0\13\112\12\0\1\112\1\113\1\114\1\115"+
    "\1\112\1\114\2\0\1\116\3\112\1\0\1\114\2\0"+
    "\1\117\3\112\1\u014f\12\112\5\0\1\112\10\0\1\112"+
    "\1\0\13\112\12\0\1\112\1\113\1\114\1\115\1\112"+
    "\1\114\2\0\1\116\1\112\1\u0150\1\112\1\0\1\114"+
    "\2\0\1\117\16\112\5\0\1\112\10\0\1\112\1\0"+
    "\13\112\12\0\1\112\1\113\1\114\1\115\1\112\1\114"+
    "\2\0\1\116\3\112\1\0\1\114\2\0\1\117\13\112"+
    "\1\u0151\2\112\5\0\1\112\10\0\1\112\1\0\13\112"+
    "\12\0\1\112\1\113\1\114\1\115\1\112\1\114\2\0"+
    "\1\116\3\112\1\0\1\114\2\0\1\117\1\112\1\u0152"+
    "\14\112\5\0\1\112\10\0\1\112\1\0\13\112\53\0"+
    "\1\u0153\71\0\1\u0154\26\0\1\u0122\25\0\1\u0155\1\u0156"+
    "\1\u0157\1\u0158\1\u0155\1\u0157\1\u0159\2\0\3\u0155\1\0"+
    "\1\u0157\1\0\1\u0159\1\u015a\16\u0155\2\0\1\u015a\1\u0159"+
    "\1\0\1\u0155\1\u0159\1\u015b\4\u0159\1\u015b\1\u015c\1\u0155"+
    "\1\u0159\13\u0155\4\u0159\1\u015b\46\0\1\u015d\71\0\1\u015e"+
    "\26\0\1\u0126\25\0\1\u015f\1\u0160\1\u0161\1\u0162\1\u015f"+
    "\1\u0161\1\u0163\2\0\3\u015f\1\0\1\u0161\1\0\1\u0163"+
    "\1\u0164\16\u015f\2\0\1\u0164\1\u0163\1\0\1\u015f\1\u0163"+
    "\1\u0165\4\u0163\1\u0165\1\u0166\1\u015f\1\u0163\13\u015f\4\u0163"+
    "\1\u0165\46\0\1\u0167\71\0\1\u0168\26\0\1\u012a\25\0"+
    "\1\u0169\1\u016a\1\u016b\1\u016c\1\u0169\1\u016b\1\u016d\2\0"+
    "\3\u0169\1\0\1\u016b\1\0\1\u016d\1\u016e\16\u0169\2\0"+
    "\1\u016e\1\u016d\1\0\1\u0169\1\u016d\1\u016f\4\u016d\1\u016f"+
    "\1\u0170\1\u0169\1\u016d\13\u0169\4\u016d\1\u016f\7\0\1\u0171"+
    "\1\u0172\1\u0173\1\u0171\5\0\1\u0173\1\0\1\u0171\3\0"+
    "\3\u0173\6\0\1\u0173\1\0\1\u0173\26\0\1\u0173\2\0"+
    "\1\u0173\2\0\1\u0173\12\0\1\112\1\113\1\114\1\115"+
    "\1\112\1\114\2\0\1\116\3\112\1\0\1\114\2\0"+
    "\1\117\16\112\5\0\1\112\10\0\1\112\1\0\7\112"+
    "\1\u0174\3\112\12\0\1\112\1\113\1\114\1\115\1\112"+
    "\1\114\2\0\1\116\3\112\1\0\1\114\2\0\1\117"+
    "\16\112\5\0\1\112\10\0\1\112\1\0\7\112\1\u0175"+
    "\3\112\12\0\1\112\1\113\1\114\1\115\1\112\1\114"+
    "\2\0\1\116\3\112\1\0\1\114\2\0\1\117\16\112"+
    "\5\0\1\112\10\0\1\112\1\0\10\112\1\u0176\2\112"+
    "\11\0\3\252\1\u0177\1\u0178\1\u0179\1\u0177\1\130\1\0"+
    "\3\252\1\u0179\1\252\1\u0177\3\252\3\u0179\6\252\1\u0179"+
    "\1\252\1\u0179\26\252\1\u0179\2\252\1\u0179\2\252\1\u0179"+
    "\11\252\3\140\1\u017a\1\u017b\1\u017c\1\u017a\2\140\1\265"+
    "\2\140\1\u017c\1\266\1\u017a\3\140\3\u017c\6\140\1\u017c"+
    "\1\140\1\u017c\26\140\1\u017c\2\140\1\u017c\2\140\1\u017c"+
    "\11\140\24\0\1\u017d\105\0\1\u017e\101\0\1\u017f\110\0"+
    "\1\u0180\76\0\1\u0181\102\0\1\u0182\72\0\1\u0183\130\0"+
    "\1\u0184\45\0\1\112\1\113\1\114\1\115\1\112\1\114"+
    "\2\0\1\116\3\112\1\0\1\114\2\0\1\117\11\112"+
    "\1\u0185\4\112\5\0\1\112\10\0\1\112\1\0\13\112"+
    "\12\0\1\112\1\113\1\114\1\115\1\112\1\114\2\0"+
    "\1\116\3\112\1\0\1\114\2\0\1\117\16\112\5\0"+
    "\1\112\10\0\1\u0186\1\0\13\112\12\0\1\112\1\113"+
    "\1\114\1\115\1\112\1\114\2\0\1\116\3\112\1\0"+
    "\1\114\2\0\1\117\4\112\1\u0187\11\112\5\0\1\112"+
    "\10\0\1\112\1\0\13\112\12\0\1\112\1\113\1\114"+
    "\1\115\1\112\1\114\2\0\1\116\3\112\1\0\1\114"+
    "\2\0\1\117\4\112\1\u0188\11\112\5\0\1\112\10\0"+
    "\1\112\1\0\13\112\12\0\1\112\1\113\1\114\1\115"+
    "\1\112\1\114\2\0\1\116\3\112\1\0\1\114\2\0"+
    "\1\117\5\112\1\u0189\10\112\5\0\1\112\10\0\1\112"+
    "\1\0\13\112\53\0\1\u018a\103\0\1\u018b\103\0\1\u018c"+
    "\44\0\1\u018d\1\u018e\1\u018f\1\u018d\5\0\1\u018f\1\0"+
    "\1\u018d\3\0\3\u018f\6\0\1\u018f\1\0\1\u018f\26\0"+
    "\1\u018f\2\0\1\u018f\2\0\1\u018f\12\0\1\112\1\u0190"+
    "\1\114\1\115\1\112\1\114\2\0\1\116\3\112\1\0"+
    "\1\114\2\0\1\117\16\112\5\0\1\112\10\0\1\112"+
    "\1\0\13\112\12\0\1\112\1\u0191\1\114\1\115\1\112"+
    "\1\114\2\0\1\116\3\112\1\0\1\114\2\0\1\117"+
    "\16\112\5\0\1\112\10\0\1\112\1\0\13\112\12\0"+
    "\1\112\1\u0192\1\114\1\115\1\112\1\114\2\0\1\116"+
    "\3\112\1\0\1\114\2\0\1\117\16\112\5\0\1\112"+
    "\10\0\1\112\1\0\13\112\11\0\3\252\1\u0193\1\u0194"+
    "\1\u0195\1\u0193\1\130\1\0\3\252\1\u0195\1\252\1\u0193"+
    "\3\252\3\u0195\6\252\1\u0195\1\252\1\u0195\26\252\1\u0195"+
    "\2\252\1\u0195\2\252\1\u0195\11\252\3\140\1\u0196\1\u0197"+
    "\1\u0198\1\u0196\2\140\1\265\2\140\1\u0198\1\266\1\u0196"+
    "\3\140\3\u0198\6\140\1\u0198\1\140\1\u0198\26\140\1\u0198"+
    "\2\140\1\u0198\2\140\1\u0198\11\140\23\0\1\u0199\104\0"+
    "\1\u019a\101\0\1\u019b\116\0\1\u019c\47\0\1\112\1\113"+
    "\1\114\1\115\1\112\1\114\2\0\1\116\1\u019d\2\112"+
    "\1\0\1\114\2\0\1\117\16\112\5\0\1\112\10\0"+
    "\1\112\1\0\13\112\12\0\1\112\1\u019e\1\114\1\115"+
    "\1\112\1\114\2\0\1\116\3\112\1\0\1\114\2\0"+
    "\1\117\16\112\5\0\1\112\10\0\1\112\1\0\13\112"+
    "\12\0\1\112\1\u019f\1\114\1\115\1\112\1\114\2\0"+
    "\1\116\3\112\1\0\1\114\2\0\1\117\16\112\5\0"+
    "\1\112\10\0\1\112\1\0\13\112\12\0\1\112\1\u01a0"+
    "\1\114\1\115\1\112\1\114\2\0\1\116\3\112\1\0"+
    "\1\114\2\0\1\117\16\112\5\0\1\112\10\0\1\112"+
    "\1\0\13\112\34\0\1\u01a1\61\0\1\112\1\113\1\114"+
    "\1\115\1\112\1\114\2\0\1\116\3\112\1\0\1\114"+
    "\2\0\1\117\1\112\1\u01a2\14\112\5\0\1\112\10\0"+
    "\1\112\1\0\13\112\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16456];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\5\1\1\11\24\1\1\11\3\1\2\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\11\2\1\1\11"+
    "\3\1\1\11\2\1\1\11\6\1\1\11\4\1\1\11"+
    "\7\1\1\0\11\1\1\11\1\0\11\1\7\0\31\1"+
    "\10\11\3\1\4\11\2\1\1\11\2\0\1\11\2\0"+
    "\1\11\11\0\7\1\2\11\11\1\1\0\6\1\1\11"+
    "\5\0\1\1\3\0\31\1\2\11\17\0\24\1\13\0"+
    "\22\1\3\0\1\1\3\0\1\1\3\0\1\1\3\0"+
    "\16\1\3\0\2\11\4\0\1\11\1\0\11\1\2\0"+
    "\1\1\1\0\2\1\1\0\1\1\4\0\1\1\1\0"+
    "\2\1\1\0\1\1\4\0\1\1\1\0\2\1\1\0"+
    "\1\1\5\0\11\1\1\11\1\0\3\11\3\0\24\1"+
    "\2\11\1\0\1\11\4\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

private int zzPushbackPos;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public DMTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + this.offsetShift;
		this.addToken(this.zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		this.addToken(this.zzStartRead, this.zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + this.offsetShift;
		this.addToken(this.zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		this.zzStartRead = this.zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	@Override
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	@Override
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		this.resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				this.start = text.offset;
				break;

						case Token.COMMENT_DOCUMENTATION:
				state = DOCCOMMENT;
				this.start = text.offset;
				break;

			default:
				state = Token.NULL;
		}

		this.s = text;
		try {
			this.yyreset(this.zzReader);
			this.yybegin(state);
			return this.yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return this.zzCurrentPos>=this.s.offset+this.s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		this.zzBuffer = this.s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		this.zzStartRead = this.s.offset;
		this.zzEndRead = this.zzStartRead + this.s.count - 1;
		this.zzCurrentPos = this.zzMarkedPos = this.zzPushbackPos = this.s.offset;
		this.zzLexicalState = YYINITIAL;
		this.zzReader = reader;
		this.zzAtBOL  = true;
		this.zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DMTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public DMTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill_() throws java.io.IOException {

    /* first: make room (if you can) */
    if (this.zzStartRead > 0) {
      System.arraycopy(this.zzBuffer, this.zzStartRead,
                       this.zzBuffer, 0,
                       this.zzEndRead-this.zzStartRead);

      /* translate stored positions */
      this.zzEndRead-= this.zzStartRead;
      this.zzCurrentPos-= this.zzStartRead;
      this.zzMarkedPos-= this.zzStartRead;
      this.zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (this.zzCurrentPos >= this.zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[this.zzCurrentPos*2];
      System.arraycopy(this.zzBuffer, 0, newBuffer, 0, this.zzBuffer.length);
      this.zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = this.zzReader.read(this.zzBuffer, this.zzEndRead,
                                            this.zzBuffer.length-this.zzEndRead);

    if (numRead > 0) {
      this.zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream
    if (numRead == 0) {
      int c = this.zzReader.read();
      if (c == -1) {
        return true;
      } else {
        this.zzBuffer[this.zzEndRead++] = (char) c;
        return false;
      }
    }

	// numRead < 0
    return true;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    this.zzAtEOF = true;            /* indicate end of file */
    this.zzEndRead = this.zzStartRead;  /* invalidate buffer    */

    if (this.zzReader != null)
      this.zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset_(java.io.Reader reader) {
    this.zzReader = reader;
    this.zzAtBOL  = true;
    this.zzAtEOF  = false;
    this.zzEOFDone = false;
    this.zzEndRead = this.zzStartRead = 0;
    this.zzCurrentPos = this.zzMarkedPos = 0;
    this.yyline = this.yychar = this.yycolumn = 0;
    this.zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return this.zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  @Override
public final void yybegin(int newState) {
    this.zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( this.zzBuffer, this.zzStartRead, this.zzMarkedPos-this.zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return this.zzBuffer[this.zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return this.zzMarkedPos-this.zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > this.yylength() )
      this.zzScanError(ZZ_PUSHBACK_2BIG);

    this.zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = this.zzEndRead;
    char [] zzBufferL = this.zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = this.zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = this.zzCurrentPos = this.zzStartRead = zzMarkedPosL;

      this.zzState = ZZ_LEXSTATE[this.zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (this.zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            this.zzCurrentPos  = zzCurrentPosL;
            this.zzMarkedPos   = zzMarkedPosL;
            boolean eof = this.zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = this.zzCurrentPos;
            zzMarkedPosL   = this.zzMarkedPos;
            zzBufferL      = this.zzBuffer;
            zzEndReadL     = this.zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[this.zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          this.zzState = zzNext;

          int zzAttributes = zzAttrL[this.zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = this.zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      this.zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 28:
          { int temp=this.zzStartRead; this.addToken(this.start,this.zzStartRead-1, Token.COMMENT_DOCUMENTATION); this.addHyperlinkToken(temp,this.zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); this.start = this.zzMarkedPos;
          }
        case 30: break;
        case 25:
          { this.addToken(Token.PREPROCESSOR);
          }
        case 31: break;
        case 4:
          { this.addNullToken(); return this.firstToken;
          }
        case 32: break;
        case 23:
          { this.addToken(Token.LITERAL_CHAR);
          }
        case 33: break;
        case 18:
          { this.start = this.zzMarkedPos-2; this.yybegin(MLC);
          }
        case 34: break;
        case 6:
          { this.addToken(Token.WHITESPACE);
          }
        case 35: break;
        case 22:
          { this.addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 36: break;
        case 24:
          { this.addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 37: break;
        case 21:
          { this.yybegin(YYINITIAL); this.addToken(this.start,this.zzStartRead+2-1, Token.COMMENT_DOCUMENTATION);
          }
        case 38: break;
        case 15:
          { this.addToken(Token.RESERVED_WORD);
          }
        case 39: break;
        case 7:
          { this.addToken(Token.SEPARATOR);
          }
        case 40: break;
        case 1:
          { this.addToken(Token.IDENTIFIER);
          }
        case 41: break;
        case 12:
          { this.addToken(this.start,this.zzStartRead-1, Token.COMMENT_EOL); this.addNullToken(); return this.firstToken;
          }
        case 42: break;
        case 17:
          { this.start = this.zzMarkedPos-2; this.yybegin(EOL_COMMENT);
          }
        case 43: break;
        case 3:
          { this.addToken(Token.ERROR_CHAR); this.addNullToken(); return this.firstToken;
          }
        case 44: break;
        case 5:
          { this.addToken(Token.ERROR_STRING_DOUBLE); this.addNullToken(); return this.firstToken;
          }
        case 45: break;
        case 20:
          { this.yybegin(YYINITIAL); this.addToken(this.start,this.zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 46: break;
        case 14:
          { this.addToken(Token.ERROR_CHAR);
          }
        case 47: break;
        case 11:
          { this.addToken(this.start,this.zzStartRead-1, Token.COMMENT_DOCUMENTATION); return this.firstToken;
          }
        case 48: break;
        case 16:
          { this.addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 49: break;
        case 29:
          { int temp=this.zzStartRead; this.addToken(this.start,this.zzStartRead-1, Token.COMMENT_EOL); this.addHyperlinkToken(temp,this.zzMarkedPos-1, Token.COMMENT_EOL); this.start = this.zzMarkedPos;
          }
        case 50: break;
        case 27:
          { int temp=this.zzStartRead; this.addToken(this.start,this.zzStartRead-1, Token.COMMENT_MULTILINE); this.addHyperlinkToken(temp,this.zzMarkedPos-1, Token.COMMENT_MULTILINE); this.start = this.zzMarkedPos;
          }
        case 51: break;
        case 26:
          { this.addToken(Token.RESERVED_WORD_2);
          }
        case 52: break;
        case 13:
          { this.addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 53: break;
        case 19:
          { this.start = this.zzMarkedPos-2; this.yybegin(DOCCOMMENT);
          }
        case 54: break;
        case 2:
          { this.addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 55: break;
        case 8:
          { this.addToken(Token.OPERATOR);
          }
        case 56: break;
        case 9:
          {
          }
        case 57: break;
        case 10:
          { this.addToken(this.start,this.zzStartRead-1, Token.COMMENT_MULTILINE); return this.firstToken;
          }
        case 58: break;
        default:
          if (zzInput == YYEOF && this.zzStartRead == this.zzCurrentPos) {
            this.zzAtEOF = true;
            switch (this.zzLexicalState) {
            case EOL_COMMENT: {
              this.addToken(this.start,this.zzStartRead-1, Token.COMMENT_EOL); this.addNullToken(); return this.firstToken;
            }
            case 419: break;
            case DOCCOMMENT: {
              this.yybegin(YYINITIAL); this.addToken(this.start,this.zzEndRead, Token.COMMENT_DOCUMENTATION); return this.firstToken;
            }
            case 420: break;
            case YYINITIAL: {
              this.addNullToken(); return this.firstToken;
            }
            case 421: break;
            case MLC: {
              this.addToken(this.start,this.zzStartRead-1, Token.COMMENT_MULTILINE); return this.firstToken;
            }
            case 422: break;
            default:
            return null;
            }
          }
          else {
            this.zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
